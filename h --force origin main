[33mcommit cc083eacf2710eae883a8122d61b75b4a0bbcfa1[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: SrinathK-kore <srinath.kudikala@kore.com>
Date:   Thu Jul 31 02:35:23 2025 +0530

    Refactor: Load AWS credentials from .env and add .gitignore

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..a8addbb[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m.env[m
[32m+[m[32mvenv/[m
[32m+[m[32m__pycache__/[m
[32m+[m[32m*.pyc[m
[32m+[m[32m*.log[m
[1mdiff --git a/S3_accessCS.py b/S3_accessCS.py[m
[1mindex 9c5bd7e..d6c91a5 100644[m
[1m--- a/S3_accessCS.py[m
[1m+++ b/S3_accessCS.py[m
[36m@@ -1,3 +1,11 @@[m
[32m+[m[32mimport os[m
[32m+[m
[32m+[m[32maws_access_key_id = os.getenv("AWS_ACCESS_KEY_ID")[m
[32m+[m[32maws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
 def getEnvironment(date, selected_env):[m
     year = date.strftime("%Y")[m
     env_region = selected_env[:2][m
[36m@@ -5,18 +13,12 @@[m [mdef getEnvironment(date, selected_env):[m
 [m
     if selected_env != "NTT Data PROD":[m
         result["Environment"] = selected_env[m
[31m-        result["accessKey"] = "REDACTED_AKIAVG7"[m
[31m-        result["secretKey"] = "REDACTED_SECRET1"[m
[32m+[m[32m        result["accessKey"] = aws_access_key_id[m
[32m+[m[32m        result["secretKey"] = aws_secret_access_key[m
         result["bucketName"] = env_region.lower() + "-prod-chatscriptlogs"[m
         result["cslogsPath"] = "SegBots-" + env_region + "/CSLogs/" + year + "/"[m
         result["awsRegion"] = "ap-south-1"  # default[m
[31m-    else:[m
[31m-        result["Environment"] = "NTT Data PROD"[m
[31m-        result["accessKey"] = "REDACTED_AKIAU6"[m
[31m-        result["secretKey"] = "REDACTED_SECRET2"[m
[31m-        result["bucketName"] = "ntt-logs"[m
[31m-        result["cslogsPath"] = "NTT-PROD/CSLogs/" + year + "/"[m
[31m-        result["awsRegion"] = "ap-south-1"[m
[32m+[m[41m    [m
 [m
     if selected_env == "US-PROD":[m
         result["bucketName"] = "Prod-ChatScriptLogs"[m
[1mdiff --git a/__pycache__/S3_accessCS.cpython-312.pyc b/__pycache__/S3_accessCS.cpython-312.pyc[m
[1mdeleted file mode 100644[m
[1mindex a138ae7..0000000[m
Binary files a/__pycache__/S3_accessCS.cpython-312.pyc and /dev/null differ
[1mdiff --git a/__pycache__/app.cpython-312.pyc b/__pycache__/app.cpython-312.pyc[m
[1mdeleted file mode 100644[m
[1mindex 244cfc6..0000000[m
Binary files a/__pycache__/app.cpython-312.pyc and /dev/null differ
[1mdiff --git a/__pycache__/cs_logs_webapp.cpython-312.pyc b/__pycache__/cs_logs_webapp.cpython-312.pyc[m
[1mdeleted file mode 100644[m
[1mindex 7958258..0000000[m
Binary files a/__pycache__/cs_logs_webapp.cpython-312.pyc and /dev/null differ
[1mdiff --git a/__pycache__/other_logs.cpython-312.pyc b/__pycache__/other_logs.cpython-312.pyc[m
[1mdeleted file mode 100644[m
[1mindex 658df55..0000000[m
Binary files a/__pycache__/other_logs.cpython-312.pyc and /dev/null differ
[1mdiff --git a/__pycache__/s3_access.cpython-312.pyc b/__pycache__/s3_access.cpython-312.pyc[m
[1mdeleted file mode 100644[m
[1mindex 19908fa..0000000[m
Binary files a/__pycache__/s3_access.cpython-312.pyc and /dev/null differ
[1mdiff --git a/cs_logs_webapp.py b/cs_logs_webapp.py[m
[1mindex b12fd6a..3b608c1 100644[m
[1m--- a/cs_logs_webapp.py[m
[1m+++ b/cs_logs_webapp.py[m
[36m@@ -6,6 +6,16 @@[m [mfrom datetime import datetime[m
 import S3_accessCS[m
 import shlex[m
 import re[m
[32m+[m[32mfrom dotenv import load_dotenv[m
[32m+[m
[32m+[m
[32m+[m[32m# Load environment variables from .env[m
[32m+[m[32mload_dotenv()[m
[32m+[m
[32m+[m[32m# Access the values[m
[32m+[m[32maws_key = os.getenv("AWS_ACCESS_KEY_ID")[m
[32m+[m[32maws_secret = os.getenv("AWS_SECRET_ACCESS_KEY")[m
[32m+[m
 [m
 # Removed circular import of task_metadata[m
 [m
[1mdiff --git a/other_logs.py b/other_logs.py[m
[1mindex 866b01d..93ded39 100644[m
[1m--- a/other_logs.py[m
[1m+++ b/other_logs.py[m
[36m@@ -212,6 +212,16 @@[m [mimport uuid[m
 from datetime import datetime[m
 from concurrent.futures import ThreadPoolExecutor, as_completed[m
 import s3_access[m
[32m+[m[32mfrom dotenv import load_dotenv[m
[32m+[m
[32m+[m
[32m+[m[32m# Load environment variables from .env[m
[32m+[m[32mload_dotenv()[m
[32m+[m
[32m+[m[32m# Access the values[m
[32m+[m[32maws_key = os.getenv("AWS_ACCESS_KEY_ID")[m
[32m+[m[32maws_secret = os.getenv("AWS_SECRET_ACCESS_KEY")[m
[32m+[m
 [m
 def get_s3_client(access_key, secret_key, region):[m
     print(f"[DEBUG] Creating S3 client for region: {region}")[m
[1mdiff --git a/s3_access.py b/s3_access.py[m
[1mindex 07d9f48..a87ebd1 100644[m
[1m--- a/s3_access.py[m
[1m+++ b/s3_access.py[m
[36m@@ -1,71 +1,8 @@[m
[31m-# def getEnvironment(date, selected_env):[m
[31m-#     year = date.strftime("%Y")[m
[31m-#     env_region = selected_env[:2][m
[31m-[m
[31m-#     # Determine root folder[m
[31m-#     if env_region == "US":[m
[31m-#         root_folder = "SegBots"[m
[31m-#     else:[m
[31m-#         root_folder = f"SegBots-{env_region}"[m
[31m-[m
[31m-#     result = dict()[m
[31m-[m
[31m-#     if selected_env != "NTT Data PROD":[m
[31m-#         result["Environment"] = selected_env[m
[31m-#         result["accessKey"] = "REDACTED_AKIAVG7"[m
[31m-#         result["secretKey"] = "REDACTED_SECRET1"[m
[31m-#         result["bucketName"] = f"{env_region.lower()}-prod-chatscriptlogs"[m
[31m-[m
[31m-#         # Paths for CS Logs[m
[31m-#         result["cslogsPath"] = f"{root_folder}/CSLogs/{year}/"[m
[31m-#         result["otherlogsPath"] = f"{root_folder}/OtherLogs/{year}/"[m
[31m-[m
[31m-#         # Paths for specific other logs[m
[31m-#         result["botServiceRuntimePath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[31m-#         result["bsa_ka"] = f"{root_folder}/NodeServiceLogs/BotsAnalytics/{year}/"[m
[31m-#         result["faqlogsPath"] = f"{root_folder}/FAQ/{year}/"[m
[31m-#         result["mlLogsPath"] = f"{root_folder}/ML-Logs/{year}/"[m
[31m-#         result["appAndProfileLogsPath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[31m-#     else:[m
[31m-#         # NTT-specific config[m
[31m-#         result["Environment"] = "NTT Data PROD"[m
[31m-#         result["accessKey"] = "REDACTED_AKIAU6"[m
[31m-#         result["secretKey"] = "REDACTED_SECRET2"[m
[31m-#         result["bucketName"] = "ntt-logs"[m
[31m-[m
[31m-#         result["cslogsPath"] = f"NTT-PROD/CSLogs/{year}/"[m
[31m-#         result["otherlogsPath"] = f"NTT-PROD/OtherLogs/{year}/"[m
[31m-[m
[31m-#         # NTT other log paths[m
[31m-#         result["botServiceRuntimePath"] = "NTT-PROD/NodeServiceLogs/"[m
[31m-#         result["bsa_ka"] = "NTT-PROD/NodeServiceLogs/"[m
[31m-#         result["faqlogsPath"] = f"NTT-PROD/FAQ/{year}/"[m
[31m-#         result["mlLogsPath"] = f"NTT-PROD/ML-Logs/{year}/"[m
[31m-#         result["appAndProfileLogsPath"] = "NTT-PROD/NodeServiceLogs/"[m
[31m-[m
[31m-#     # Override US-PROD bucket if needed[m
[31m-#     if selected_env == "US-PROD":[m
[31m-#         result["bucketName"] = "Prod-ChatScriptLogs"[m
[31m-#         result["cslogsPath"] = f"SegBots/CSLogs/{year}/"[m
[31m-#         result["otherlogsPath"] = f"SegBots/OtherLogs/{year}/"[m
[31m-[m
[31m-#     # Optional: List of available log types for UI[m
[31m-#     result["ListOfAvailableLogs"] = [[m
[31m-#         "BotsServiceAdmin Logs",[m
[31m-#         "BotsServiceRuntime Logs",[m
[31m-#         "Koreapp Logs",[m
[31m-#         "FAQ Logs",[m
[31m-#         "ML Logs",[m
[31m-#         "app-logs",[m
[31m-#         "profile-logs",[m
[31m-#         "Nginx Logs",[m
[31m-#         "Api Access Logs",[m
[31m-#         "Error Logs"[m
[31m-#     ][m
[31m-[m
[31m-#     return result[m
[31m-[m
[31m-#-----------------------\[m
[32m+[m[32mimport os[m
[32m+[m
[32m+[m[32maws_access_key_id = os.getenv("AWS_ACCESS_KEY_ID")[m
[32m+[m[32maws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY")[m
[32m+[m
 [m
 [m
 def getEnvironment(date, selected_env):[m
[36m@@ -101,8 +38,8 @@[m [mdef getEnvironment(date, selected_env):[m
 [m
     if selected_env != "NTT Data PROD":[m
         result["Environment"] = selected_env[m
[31m-        result["accessKey"] = "REDACTED_AKIAVG7"[m
[31m-        result["secretKey"] = "REDACTED_SECRET1"[m
[32m+[m[32m        result["accessKey"] = aws_access_key_id[m
[32m+[m[32m        result["secretKey"] = aws_secret_access_key[m
         result["bucketName"] = f"{env_region.lower()}-prod-chatscriptlogs"[m
         result["awsRegion"] = aws_region[m
 [m
[36m@@ -127,22 +64,7 @@[m [mdef getEnvironment(date, selected_env):[m
 [m
     [m
 [m
[31m-    else:[m
[31m-        result["Environment"] = "NTT Data PROD"[m
[31m-        result["accessKey"] = "REDACTED_AKIAU6"[m
[31m-        result["secretKey"] = "REDACTED_SECRET2"[m
[31m-        result["bucketName"] = "ntt-logs"[m
[31m-        result["awsRegion"] = aws_region[m
 [m
[31m-        result["cslogsPath"] = f"NTT-PROD/CSLogs/{year}/"[m
[31m-        result["otherlogsPath"] = f"NTT-PROD/OtherLogs/{year}/"[m
[31m-[m
[31m-        # NTT other log paths[m
[31m-        result["botServiceRuntimePath"] = "NTT-PROD/NodeServiceLogs/"[m
[31m-        result["bsa_ka"] = "NTT-PROD/NodeServiceLogs/"[m
[31m-        result["faqlogsPath"] = f"NTT-PROD/FAQ/{year}/"[m
[31m-        result["mlLogsPath"] = f"NTT-PROD/ML-Logs/{year}/"[m
[31m-        result["appAndProfileLogsPath"] = "NTT-PROD/NodeServiceLogs/"[m
 [m
     # Override US-PROD bucket if needed[m
     if selected_env == "US-PROD":[m
[36m@@ -167,45 +89,3 @@[m [mdef getEnvironment(date, selected_env):[m
     return result[m
 [m
 [m
[31m-[m
[31m-#--------------------[m
[31m-[m
[31m-# def getEnvironment(date_obj, env_name):[m
[31m-#     region_map = {[m
[31m-#         "US-PROD": "us-east-1",[m
[31m-#         "DE-PROD": "eu-central-1",[m
[31m-#         "JP-PROD": "ap-northeast-1",[m
[31m-#         "AU-PROD": "ap-southeast-2",[m
[31m-#         "EU-PROD": "eu-west-1",[m
[31m-#         "NTT Data PROD": "ap-south-1"   # Or whatever is correct[m
[31m-#     }[m
[31m-[m
[31m-#     bucket = "Prod-ChatScriptLogs"  # your actual bucket[m
[31m-#     region = region_map.get(env_name)[m
[31m-[m
[31m-#     if not region:[m
[31m-#         raise Exception(f"Invalid AWS region mapping for environment: {env_name}")[m
[31m-[m
[31m-#     return {[m
[31m-#         "awsRegion": region,[m
[31m-#         "bucketName": bucket,[m
[31m-#         # Include your s3 key paths here like:[m
[31m-#         "bsa_ka": "SegBots/NodeServiceLogs/BotsAnalytics/",[m
[31m-#         "botServiceRuntimePath": "SegBots/NodeServiceLogs/BotsApp/",[m
[31m-#         "faqlogsPath": "SegBots/NodeServiceLogs/BotsFaq/",[m
[31m-#         "mlLogsPath": "SegBots/NodeServiceLogs/MLService/",[m
[31m-#         "appAndProfileLogsPath": "SegBots/NodeServiceLogs/BotsApp/",[m
[31m-#         "ListOfAvailableLogs": [[m
[31m-#             "BotsServiceAdmin Logs",[m
[31m-#             "BotsServiceRuntime Logs",[m
[31m-#             "Koreapp Logs",[m
[31m-#             "FAQ Logs",[m
[31m-#             "ML Logs",[m
[31m-#             "app-logs",[m
[31m-#             "profile-logs",[m
[31m-#             "Nginx Logs",[m
[31m-#             "Api Access Logs",[m
[31m-#             "Error Logs"[m
[31m-#         ][m
[31m-#     }[m
[31m-[m

[33mcommit 5e154c49e793849ec8b2d0fb33843189d6eb15a9[m
Author: SrinathK-kore <srinath.kudikala@kore.com>
Date:   Thu Jul 31 01:41:21 2025 +0530

    Initial commit

[1mdiff --git a/Procfile b/Procfile[m
[1mnew file mode 100644[m
[1mindex 0000000..ca6e941[m
[1m--- /dev/null[m
[1m+++ b/Procfile[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mweb: gunicorn app:app[m
[1mdiff --git a/S3_accessCS.py b/S3_accessCS.py[m
[1mnew file mode 100644[m
[1mindex 0000000..9c5bd7e[m
[1m--- /dev/null[m
[1m+++ b/S3_accessCS.py[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32mdef getEnvironment(date, selected_env):[m
[32m+[m[32m    year = date.strftime("%Y")[m
[32m+[m[32m    env_region = selected_env[:2][m
[32m+[m[32m    result = dict()[m
[32m+[m
[32m+[m[32m    if selected_env != "NTT Data PROD":[m
[32m+[m[32m        result["Environment"] = selected_env[m
[32m+[m[32m        result["accessKey"] = "REDACTED_AKIAVG7"[m
[32m+[m[32m        result["secretKey"] = "REDACTED_SECRET1"[m
[32m+[m[32m        result["bucketName"] = env_region.lower() + "-prod-chatscriptlogs"[m
[32m+[m[32m        result["cslogsPath"] = "SegBots-" + env_region + "/CSLogs/" + year + "/"[m
[32m+[m[32m        result["awsRegion"] = "ap-south-1"  # default[m
[32m+[m[32m    else:[m
[32m+[m[32m        result["Environment"] = "NTT Data PROD"[m
[32m+[m[32m        result["accessKey"] = "REDACTED_AKIAU6"[m
[32m+[m[32m        result["secretKey"] = "REDACTED_SECRET2"[m
[32m+[m[32m        result["bucketName"] = "ntt-logs"[m
[32m+[m[32m        result["cslogsPath"] = "NTT-PROD/CSLogs/" + year + "/"[m
[32m+[m[32m        result["awsRegion"] = "ap-south-1"[m
[32m+[m
[32m+[m[32m    if selected_env == "US-PROD":[m
[32m+[m[32m        result["bucketName"] = "Prod-ChatScriptLogs"[m
[32m+[m[32m        result["cslogsPath"] = "SegBots/CSLogs/" + year + "/"[m
[32m+[m[32m        result["awsRegion"] = "us-east-1"[m[41m  [m
[32m+[m
[32m+[m[32m    return result[m
[1mdiff --git a/__pycache__/S3_accessCS.cpython-312.pyc b/__pycache__/S3_accessCS.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..a138ae7[m
Binary files /dev/null and b/__pycache__/S3_accessCS.cpython-312.pyc differ
[1mdiff --git a/__pycache__/app.cpython-312.pyc b/__pycache__/app.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..244cfc6[m
Binary files /dev/null and b/__pycache__/app.cpython-312.pyc differ
[1mdiff --git a/__pycache__/cs_logs_webapp.cpython-312.pyc b/__pycache__/cs_logs_webapp.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..7958258[m
Binary files /dev/null and b/__pycache__/cs_logs_webapp.cpython-312.pyc differ
[1mdiff --git a/__pycache__/other_logs.cpython-312.pyc b/__pycache__/other_logs.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..658df55[m
Binary files /dev/null and b/__pycache__/other_logs.cpython-312.pyc differ
[1mdiff --git a/__pycache__/s3_access.cpython-312.pyc b/__pycache__/s3_access.cpython-312.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..19908fa[m
Binary files /dev/null and b/__pycache__/s3_access.cpython-312.pyc differ
[1mdiff --git a/app.py b/app.py[m
[1mnew file mode 100644[m
[1mindex 0000000..d5ca327[m
[1m--- /dev/null[m
[1m+++ b/app.py[m
[36m@@ -0,0 +1,150 @@[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mfrom flask import Flask, request, jsonify, send_file, render_template[m
[32m+[m[32mfrom concurrent.futures import ThreadPoolExecutor, Future[m
[32m+[m[32mfrom cs_logs_webapp import run_log_fetch[m
[32m+[m[32mfrom other_logs import run_other_logs_fetch[m
[32m+[m[32mimport os[m
[32m+[m[32mimport uuid[m
[32m+[m[32mimport threading[m
[32m+[m[32mimport time[m
[32m+[m
[32m+[m[32mapp = Flask(__name__)[m
[32m+[m
[32m+[m[32m# Background task management[m
[32m+[m[32mexecutor = ThreadPoolExecutor(max_workers=10)[m
[32m+[m[32mtasks = {}  # task_id -> future[m
[32m+[m[32mtask_metadata = {}  # task_id -> {start_time, status, result_path, error, cancel_event}[m
[32m+[m
[32m+[m[32mdef background_wrapper(task_id, func, cancel_event, *args):[m
[32m+[m[32m    print(f"[DEBUG] Starting background task: {task_id}")[m
[32m+[m[32m    task_metadata[task_id] = {[m
[32m+[m[32m        "status": "in_progress",[m
[32m+[m[32m        "start_time": time.time(),[m
[32m+[m[32m        "cancel_event": cancel_event,[m
[32m+[m[32m        "progress": 0,[m
[32m+[m[32m        "result_path": None,[m
[32m+[m[32m        "error": None[m
[32m+[m[32m    }[m
[32m+[m[32m    try:[m
[32m+[m[32m        result_path = func(*args, cancel_event=cancel_event, task_id=task_id, task_metadata_ref=task_metadata)[m
[32m+[m[32m        if cancel_event.is_set() or result_path is None:[m
[32m+[m[32m            print(f"[DEBUG] Task {task_id} was cancelled or returned None")[m
[32m+[m[32m            task_metadata[task_id]["status"] = "cancelled"[m
[32m+[m[32m            task_metadata[task_id]["result_path"] = None[m
[32m+[m[32m            return[m
[32m+[m[32m        task_metadata[task_id]["status"] = "completed"[m
[32m+[m[32m        task_metadata[task_id]["result_path"] = result_path[m
[32m+[m[32m        print(f"[DEBUG] Task {task_id} completed successfully")[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        if cancel_event.is_set():[m
[32m+[m[32m            print(f"[DEBUG] Task {task_id} was cancelled with exception: {e}")[m
[32m+[m[32m            task_metadata[task_id]["status"] = "cancelled"[m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f"[ERROR] Task {task_id} failed with error: {e}")[m
[32m+[m[32m            task_metadata[task_id]["status"] = "failed"[m
[32m+[m[32m            task_metadata[task_id]["error"] = str(e)[m
[32m+[m
[32m+[m[32mdef submit_task(func, *args):[m
[32m+[m[32m    task_id = str(uuid.uuid4())[m
[32m+[m[32m    print(f"[DEBUG] Submitting new task: {task_id}")[m
[32m+[m[32m    cancel_event = threading.Event()[m
[32m+[m[32m    future = executor.submit(background_wrapper, task_id, func, cancel_event, *args)[m
[32m+[m[32m    tasks[task_id] = future[m
[32m+[m[32m    return task_id[m
[32m+[m
[32m+[m[32m@app.route("/")[m
[32m+[m[32mdef index():[m
[32m+[m[32m    print("[DEBUG] Serving index page")[m
[32m+[m[32m    return render_template("form.html")[m
[32m+[m
[32m+[m[32m@app.route("/download_cs")[m
[32m+[m[32mdef download_cs_logs():[m
[32m+[m[32m    date = request.args.get("date")[m
[32m+[m[32m    env = int(request.args.get("env"))[m
[32m+[m[32m    sidcid = request.args.get("sidcid")[m
[32m+[m[32m    lang = int(request.args.get("lang"))[m
[32m+[m
[32m+[m[32m    print(f"[DEBUG] Received CS logs request - Date: {date}, Env: {env}, SIDCID: {sidcid}, Lang: {lang}")[m
[32m+[m[32m    task_id = submit_task(run_log_fetch, date, env, sidcid, lang)[m
[32m+[m[32m    return jsonify({"task_id": task_id, "status": "in_progress"})[m
[32m+[m
[32m+[m[32m@app.route("/download_other")[m
[32m+[m[32mdef download_other_logs():[m
[32m+[m[32m    date = request.args.get("date")[m
[32m+[m[32m    env = int(request.args.get("env"))[m
[32m+[m[32m    selected_logs = request.args.getlist("logs")[m
[32m+[m
[32m+[m[32m    print(f"[DEBUG] Received Other logs request - Date: {date}, Env: {env}, Logs: {selected_logs}")[m
[32m+[m[32m    if not selected_logs:[m
[32m+[m[32m        print("[ERROR] No log types selected for other logs")[m
[32m+[m[32m        return jsonify({"error": "No log types selected."}), 400[m
[32m+[m
[32m+[m[32m    task_id = submit_task(run_other_logs_fetch, date, env, selected_logs)[m
[32m+[m[32m    return jsonify({"task_id": task_id, "status": "in_progress"})[m
[32m+[m
[32m+[m[32m@app.route("/status/<task_id>")[m
[32m+[m[32mdef get_status(task_id):[m
[32m+[m[32m    meta = task_metadata.get(task_id)[m
[32m+[m[32m    if not meta:[m
[32m+[m[32m        print(f"[WARN] Status requested for unknown task ID: {task_id}")[m
[32m+[m[32m        return jsonify({"status": "not_found"}), 404[m
[32m+[m
[32m+[m[32m    elapsed = int(time.time() - meta["start_time"])[m
[32m+[m[32m    print(f"[DEBUG] Status check for task {task_id} - Status: {meta['status']}, Elapsed: {elapsed}s")[m
[32m+[m[32m    return jsonify({[m
[32m+[m[32m        "task_id": task_id,[m
[32m+[m[32m        "status": meta["status"],[m
[32m+[m[32m        "elapsed_seconds": elapsed,[m
[32m+[m[32m        "result": meta.get("result_path"),[m
[32m+[m[32m        "error": meta.get("error"),[m
[32m+[m[32m        "progress": meta.get("progress", 0)[m
[32m+[m[32m    })[m
[32m+[m
[32m+[m[32m@app.route("/download/<task_id>")[m
[32m+[m[32mdef download_result(task_id):[m
[32m+[m[32m    meta = task_metadata.get(task_id)[m
[32m+[m[32m    if not meta:[m
[32m+[m[32m        print(f"[ERROR] Download requested for invalid task ID: {task_id}")[m
[32m+[m[32m        return "Invalid task ID", 404[m
[32m+[m[32m    if meta["status"] != "completed" or not meta.get("result_path"):[m
[32m+[m[32m        print(f"[WARN] Download attempted before completion for task: {task_id}")[m
[32m+[m[32m        return "Task not completed or result unavailable", 400[m
[32m+[m
[32m+[m[32m    print(f"[DEBUG] Serving download for task: {task_id}")[m
[32m+[m[32m    return send_file([m
[32m+[m[32m        meta["result_path"],[m
[32m+[m[32m        as_attachment=True,[m
[32m+[m[32m        download_name=os.path.basename(meta["result_path"]),[m
[32m+[m[32m        mimetype='application/zip'[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m@app.route("/cancel/<task_id>", methods=["POST"])[m
[32m+[m[32mdef cancel_task(task_id):[m
[32m+[m[32m    future = tasks.get(task_id)[m
[32m+[m[32m    if not future:[m
[32m+[m[32m        print(f"[ERROR] Cancel requested for unknown task: {task_id}")[m
[32m+[m[32m        return jsonify({"error": "Task not found."}), 404[m
[32m+[m
[32m+[m[32m    meta = task_metadata.get(task_id)[m
[32m+[m[32m    if not meta:[m
[32m+[m[32m        print(f"[ERROR] Task metadata missing for cancellation: {task_id}")[m
[32m+[m[32m        return jsonify({"error": "Task metadata missing."}), 404[m
[32m+[m
[32m+[m[32m    if meta["status"] in ["completed", "failed", "cancelled"]:[m
[32m+[m[32m        print(f"[INFO] Cancellation ignored. Task {task_id} already {meta['status']}")[m
[32m+[m[32m        return jsonify({"message": f"Task already {meta['status']}"})[m
[32m+[m
[32m+[m[32m    cancel_event = meta.get("cancel_event")[m
[32m+[m[32m    if cancel_event:[m
[32m+[m[32m        cancel_event.set()[m
[32m+[m[32m        print(f"[DEBUG] Cancellation triggered for task: {task_id}")[m
[32m+[m[32m        return jsonify({"message": "Task cancellation initiated."})[m
[32m+[m[32m    else:[m
[32m+[m[32m        print(f"[ERROR] Cancel event missing for task: {task_id}")[m
[32m+[m[32m        return jsonify({"error": "Cancel event not available."}), 500[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    print("[DEBUG] Starting Flask app on port 5051")[m
[32m+[m[32m    app.run(debug=True, port=5051, threaded=True)[m
[1mdiff --git a/cs_logs_webapp.py b/cs_logs_webapp.py[m
[1mnew file mode 100644[m
[1mindex 0000000..b12fd6a[m
[1m--- /dev/null[m
[1m+++ b/cs_logs_webapp.py[m
[36m@@ -0,0 +1,184 @@[m
[32m+[m[32mimport os[m
[32m+[m[32mimport subprocess[m
[32m+[m[32mimport shutil[m
[32m+[m[32mimport multiprocessing as mp[m
[32m+[m[32mfrom datetime import datetime[m
[32m+[m[32mimport S3_accessCS[m
[32m+[m[32mimport shlex[m
[32m+[m[32mimport re[m
[32m+[m
[32m+[m[32m# Removed circular import of task_metadata[m
[32m+[m
[32m+[m[32mdef is_valid_sidcid(sidcid):[m
[32m+[m[32m    return re.match(r"^st-[a-f0-9\-]+\+u-[a-f0-9\-]+$", sidcid) is not None[m
[32m+[m
[32m+[m[32mdef extract_userid_from_sidcid(sidcid):[m
[32m+[m[32m    return sidcid[m
[32m+[m
[32m+[m[32mdef list_folders(bucket, path):[m
[32m+[m[32m    result = subprocess.run([[m
[32m+[m[32m        "aws", "s3", "ls", f"s3://{bucket}/{path}/"[m
[32m+[m[32m    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)[m
[32m+[m[32m    if result.returncode != 0:[m
[32m+[m[32m        print(f"[ERROR] Failed to list S3 path: s3://{bucket}/{path}/")[m
[32m+[m[32m        print(f"[STDERR] {result.stderr}")[m
[32m+[m[32m    return [line.split()[-1].rstrip("/") for line in result.stdout.splitlines() if line.endswith("/")][m
[32m+[m
[32m+[m[32mdef getLanguages(bucketName, cslogsPath, firstFolder):[m
[32m+[m[32m    output = subprocess.run([[m
[32m+[m[32m        "aws", "s3", "ls", f"s3://{bucketName}/{cslogsPath}/{firstFolder}/"[m
[32m+[m[32m    ], stdout=subprocess.PIPE, text=True)[m
[32m+[m[32m    return [line.split()[-1][:-1] for line in output.stdout.splitlines() if line.endswith("/")][m
[32m+[m
[32m+[m[32mdef downloadLogsAllLanguages(bucketName, cslogsPath, ipFolder, folderPath, pattern):[m
[32m+[m[32m    target_path = os.path.join(folderPath, ipFolder)[m
[32m+[m[32m    os.makedirs(target_path, exist_ok=True)[m
[32m+[m[32m    cmd = f'aws s3 sync "s3://{bucketName}/{cslogsPath}/{ipFolder}" "{target_path}" --exclude "*" --include "*{pattern}*"'[m
[32m+[m[32m    print(f"[DEBUG] Executing sync for IP: {ipFolder} with pattern: {pattern}")[m
[32m+[m[32m    result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)[m
[32m+[m[32m    if result.stdout.strip():[m
[32m+[m[32m        print(f"[MATCH] {ipFolder} - files matched")[m
[32m+[m[32m        return True[m
[32m+[m[32m    else:[m
[32m+[m[32m        shutil.rmtree(target_path)[m
[32m+[m[32m        print(f"[NO MATCH] {ipFolder} - no match")[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m[32mdef downloadSingleLanguage(bucketName, cslogsPath, langFolder, ipFolder, folderPath, pattern):[m
[32m+[m[32m    target_path = os.path.join(folderPath, ipFolder, langFolder)[m
[32m+[m[32m    os.makedirs(target_path, exist_ok=True)[m
[32m+[m[32m    cmd = f'aws s3 cp --recursive "s3://{bucketName}/{cslogsPath}/{ipFolder}/{langFolder}" "{target_path}" --exclude "*" --include "*{pattern}*"'[m
[32m+[m[32m    print(f"[DEBUG] Executing copy for IP: {ipFolder}, Lang: {langFolder} with pattern: {pattern}")[m
[32m+[m[32m    result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)[m
[32m+[m[32m    if result.stdout.strip():[m
[32m+[m[32m        print(f"[MATCH] {ipFolder}/{langFolder} - files matched")[m
[32m+[m[32m        return True[m
[32m+[m[32m    else:[m
[32m+[m[32m        shutil.rmtree(target_path)[m
[32m+[m[32m        print(f"[NO MATCH] {ipFolder}/{langFolder} - no match")[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m[32mdef parallel_download(jobs):[m
[32m+[m[32m    MAX_PARALLEL_PROCESSES = 8[m
[32m+[m[32m    active = [][m
[32m+[m[32m    for job in jobs:[m
[32m+[m[32m        p = mp.Process(target=job[0], args=job[1])[m
[32m+[m[32m        p.start()[m
[32m+[m[32m        active.append(p)[m
[32m+[m[32m        if len(active) >= MAX_PARALLEL_PROCESSES:[m
[32m+[m[32m            for proc in active:[m
[32m+[m[32m                proc.join()[m
[32m+[m[32m            active = [][m
[32m+[m[32m    for proc in active:[m
[32m+[m[32m        proc.join()[m
[32m+[m
[32m+[m[32mdef searchAllLanguages(bucket, path, ipFolders, folder, pattern):[m
[32m+[m[32m    jobs = [(downloadLogsAllLanguages, (bucket, path, ip, folder, pattern)) for ip in ipFolders][m
[32m+[m[32m    parallel_download(jobs)[m
[32m+[m[32m    return any(os.path.exists(os.path.join(folder, ip)) for ip in ipFolders)[m
[32m+[m
[32m+[m[32mdef searchSingleLanguage(lang, bucket, path, ipFolders, folder, pattern):[m
[32m+[m[32m    jobs = [(downloadSingleLanguage, (bucket, path, lang, ip, folder, pattern)) for ip in ipFolders][m
[32m+[m[32m    parallel_download(jobs)[m
[32m+[m[32m    return any(os.path.exists(os.path.join(folder, ip, lang)) for ip in ipFolders)[m
[32m+[m
[32m+[m[32mdef run_log_fetch(date_str, env_id, sidcid, lang_choice, cancel_event=None, task_id=None, task_metadata_ref=None):[m
[32m+[m[32m    print(f"[DEBUG] Date: {date_str}, Env: {env_id}, SID+CID: {sidcid}, Lang: {lang_choice}")[m
[32m+[m[32m    mp.freeze_support()[m
[32m+[m
[32m+[m[32m    if not is_valid_sidcid(sidcid):[m
[32m+[m[32m        raise ValueError("Invalid Bot ID + User ID format. Expected format: st-<uuid>+u-<uuid>  but you got is :" , sidcid )[m
[32m+[m
[32m+[m[32m    pattern = shlex.quote(sidcid)[m
[32m+[m
[32m+[m[32m    environments = ["US-PROD", "DE-PROD", "JP-PROD", "AU-PROD", "EU-PROD", "NTT Data PROD"][m
[32m+[m[32m    date_obj = datetime.strptime(date_str, "%Y-%m-%d")[m
[32m+[m[32m    selectedAccount = S3_accessCS.getEnvironment(date_obj, environments[env_id - 1])[m
[32m+[m
[32m+[m[32m    bucket = selectedAccount["bucketName"][m
[32m+[m[32m    root_cslogs_path = selectedAccount["cslogsPath"][m
[32m+[m
[32m+[m[32m    folder_formats = [[m
[32m+[m[32m        date_obj.strftime("%d-%b-%Y"),[m
[32m+[m[32m        date_obj.strftime("%Y-%m-%d"),[m
[32m+[m[32m        date_obj.strftime("%d_%b_%Y")[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    if task_metadata_ref and task_id:[m
[32m+[m[32m        task_metadata_ref[task_id]["progress"] = 10[m
[32m+[m
[32m+[m[32m    found_path = None[m
[32m+[m[32m    folder = None[m
[32m+[m[32m    for fmt in folder_formats:[m
[32m+[m[32m        if cancel_event and cancel_event.is_set():[m
[32m+[m[32m            print(f"[CANCELLED] Task {task_id} cancelled while checking paths")[m
[32m+[m[32m            return[m
[32m+[m[32m        full_path = f"{root_cslogs_path}{fmt}"[m
[32m+[m[32m        print(f"[DEBUG] Checking path: s3://{bucket}/{full_path}/")[m
[32m+[m[32m        ipFolders = list_folders(bucket, full_path)[m
[32m+[m[32m        if ipFolders:[m
[32m+[m[32m            found_path = full_path[m
[32m+[m[32m            folder = fmt[m
[32m+[m[32m            print(f"[INFO] Valid CS Logs path found: {found_path}")[m
[32m+[m[32m            break[m
[32m+[m
[32m+[m[32m    if not found_path:[m
[32m+[m[32m        raise Exception("No valid CSLogs path found in S3 for given date format.")[m
[32m+[m
[32m+[m[32m    subprocess.run(["aws", "configure", "set", "aws_access_key_id", selectedAccount["accessKey"]])[m
[32m+[m[32m    subprocess.run(["aws", "configure", "set", "aws_secret_access_key", selectedAccount["secretKey"]])[m
[32m+[m
[32m+[m[32m    folderPath = f"/tmp/{folder.replace('/', '-').replace(' ', '_')}_CS_Logs_{sidcid}"[m
[32m+[m[32m    os.makedirs(folderPath, exist_ok=True)[m
[32m+[m
[32m+[m[32m    print(f"[DEBUG] Using path: {found_path}")[m
[32m+[m[32m    print(f"[DEBUG] IP folders: {ipFolders}")[m
[32m+[m[32m    if not ipFolders:[m
[32m+[m[32m        raise Exception("No IP folders found in S3 path.")[m
[32m+[m
[32m+[m[32m    langFolders = getLanguages(bucket, found_path, ipFolders[0])[m
[32m+[m[32m    print(f"[DEBUG] Language Folders: {langFolders}")[m
[32m+[m
[32m+[m[32m    if cancel_event and cancel_event.is_set():[m
[32m+[m[32m        print(f"[CANCELLED] Task {task_id} cancelled before download started")[m
[32m+[m[32m        shutil.rmtree(folderPath, ignore_errors=True)[m
[32m+[m[32m        return[m
[32m+[m
[32m+[m[32m    if task_metadata_ref and task_id:[m
[32m+[m[32m        task_metadata_ref[task_id]["progress"] = 30[m
[32m+[m
[32m+[m[32m    matched = False[m
[32m+[m[32m    if lang_choice == len(langFolders) + 1:[m
[32m+[m[32m        print("[INFO] Fetching all languages...")[m
[32m+[m[32m        matched = searchAllLanguages(bucket, found_path, ipFolders, folderPath, pattern)[m
[32m+[m[32m    else:[m
[32m+[m[32m        langFolder = langFolders[lang_choice - 1][m
[32m+[m[32m        print(f"[INFO] Fetching single language: {langFolder}")[m
[32m+[m[32m        matched = searchSingleLanguage(langFolder, bucket, found_path, ipFolders, folderPath, pattern)[m
[32m+[m
[32m+[m[32m    if cancel_event and cancel_event.is_set():[m
[32m+[m[32m        print(f"[CANCELLED] Task {task_id} cancelled after download")[m
[32m+[m[32m        shutil.rmtree(folderPath, ignore_errors=True)[m
[32m+[m[32m        return[m
[32m+[m
[32m+[m[32m    if not matched:[m
[32m+[m[32m        shutil.rmtree(folderPath)[m
[32m+[m[32m        raise Exception("No logs matched the provided Bot ID + User ID.")[m
[32m+[m
[32m+[m[32m    if task_metadata_ref and task_id:[m
[32m+[m[32m        task_metadata_ref[task_id]["progress"] = 70[m
[32m+[m
[32m+[m[32m    sorted_output = os.path.join(folderPath, "sorted.json")[m
[32m+[m[32m    sort_cmd = f'find "{folderPath}" -name "log-*" -print0 | xargs -0 cat | sed -rn "s/Respond:.*\\\"volley\\\": ([0-9]*), .*/\\1 <===> \\0/p" | sort -k1,1 -n > "{sorted_output}"'[m
[32m+[m[32m    subprocess.run(sort_cmd, shell=True, executable="/bin/bash")[m
[32m+[m
[32m+[m[32m    zip_name = f"{folder} CS Logs {sidcid}.zip"[m
[32m+[m[32m    zip_path = os.path.join("/tmp", zip_name)[m
[32m+[m[32m    shutil.make_archive(zip_path.replace(".zip", ""), 'zip', folderPath)[m
[32m+[m[32m    shutil.rmtree(folderPath)[m
[32m+[m[32m    print(f"[DEBUG] Zip created at: {zip_path}")[m
[32m+[m
[32m+[m[32m    if task_metadata_ref and task_id:[m
[32m+[m[32m        task_metadata_ref[task_id]["progress"] = 100[m
[32m+[m
[32m+[m[32m    return zip_path[m
[1mdiff --git a/other_logs.py b/other_logs.py[m
[1mnew file mode 100644[m
[1mindex 0000000..866b01d[m
[1m--- /dev/null[m
[1m+++ b/other_logs.py[m
[36m@@ -0,0 +1,414 @@[m
[32m+[m[32m# import os[m
[32m+[m[32m# import boto3[m
[32m+[m[32m# import shutil[m
[32m+[m[32m# import uuid[m
[32m+[m[32m# import logging[m
[32m+[m[32m# from datetime import datetime[m
[32m+[m[32m# from concurrent.futures import ThreadPoolExecutor, as_completed[m
[32m+[m[32m# from boto3.s3.transfer import TransferConfig, S3Transfer[m
[32m+[m[32m# import s3_access[m
[32m+[m
[32m+[m[32m# # logging.basicConfig(level=logging.DEBUG, format='[%(asctime)s] [%(levelname)s] %(message)s')[m
[32m+[m[32m# logging.basicConfig(level=logging.DEBUG)[m
[32m+[m
[32m+[m[32m# def get_s3_client(access_key, secret_key, region):[m
[32m+[m[32m#     return boto3.client([m
[32m+[m[32m#         's3',[m
[32m+[m[32m#         aws_access_key_id=access_key,[m
[32m+[m[32m#         aws_secret_access_key=secret_key,[m
[32m+[m[32m#         region_name=region[m
[32m+[m[32m#     )[m
[32m+[m
[32m+[m[32m# def list_folders(s3, bucket, prefix):[m
[32m+[m[32m#     paginator = s3.get_paginator('list_objects_v2')[m
[32m+[m[32m#     result = paginator.paginate(Bucket=bucket, Prefix=prefix, Delimiter='/')[m
[32m+[m[32m#     folders = [][m
[32m+[m[32m#     for page in result:[m
[32m+[m[32m#         for cp in page.get('CommonPrefixes', []):[m
[32m+[m[32m#             folder_name = cp['Prefix'].rstrip('/').split('/')[-1][m
[32m+[m[32m#             folders.append(folder_name)[m
[32m+[m[32m#             logging.debug(f"[LIST FOLDER] Found folder: {folder_name}")[m
[32m+[m[32m#     return folders[m
[32m+[m
[32m+[m[32m# def list_matching_keys(s3, bucket, prefix, pattern, cancel_event=None, task_id=None):[m
[32m+[m[32m#     paginator = s3.get_paginator('list_objects_v2')[m
[32m+[m[32m#     pages = paginator.paginate(Bucket=bucket, Prefix=prefix)[m
[32m+[m[32m#     matched_keys = [][m
[32m+[m[32m#     total_size = 0[m
[32m+[m[32m#     for page in pages:[m
[32m+[m[32m#         if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#             logging.info("[CANCEL] Key listing cancelled")[m
[32m+[m[32m#             return [][m
[32m+[m[32m#         for obj in page.get('Contents', []):[m
[32m+[m[32m#             key = obj['Key'][m
[32m+[m[32m#             size = obj['Size'][m
[32m+[m[32m#             if pattern in key:[m
[32m+[m[32m#                 matched_keys.append(key)[m
[32m+[m[32m#                 total_size += size[m
[32m+[m[32m#                 logging.debug(f"[MATCH] Key matched: {key} (Size: {size} bytes)")[m
[32m+[m[32m#     logging.info(f"[SUMMARY] Total matched keys: {len(matched_keys)}; Total size: {total_size / (1024**2):.2f} MB")[m
[32m+[m[32m#     if total_size > 2 * 1024 * 1024 * 1024:[m
[32m+[m[32m#         logging.warning(f"[WARN] Total estimated download size is over 2GB: {total_size / (1024**3):.2f} GB")[m
[32m+[m[32m#     return matched_keys[m
[32m+[m
[32m+[m[32m# def download_keys(s3, bucket, matched_keys, prefix, local_path, max_files, cancel_event=None, task_id=None):[m
[32m+[m[32m#     os.makedirs(local_path, exist_ok=True)[m
[32m+[m[32m#     downloaded = 0[m
[32m+[m[32m#     config = TransferConfig(multipart_threshold=20 * 1024 * 1024, max_concurrency=10, multipart_chunksize=25 * 1024 * 1024)[m
[32m+[m[32m#     transfer = S3Transfer(s3, config)[m
[32m+[m[32m#     for key in matched_keys:[m
[32m+[m[32m#         if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#             logging.warning("[CANCEL] Download cancelled")[m
[32m+[m[32m#             shutil.rmtree(local_path, ignore_errors=True)[m
[32m+[m[32m#             return None[m
[32m+[m[32m#         rel_path = key.replace(prefix, '').lstrip('/')[m
[32m+[m[32m#         local_file_path = os.path.join(local_path, rel_path)[m
[32m+[m[32m#         os.makedirs(os.path.dirname(local_file_path), exist_ok=True)[m
[32m+[m[32m#         try:[m
[32m+[m[32m#             logging.info(f"[DOWNLOAD] Starting download: s3://{bucket}/{key} -> {local_file_path}")[m
[32m+[m[32m#             transfer.download_file(bucket, key, local_file_path)[m
[32m+[m[32m#             downloaded += 1[m
[32m+[m[32m#             logging.info(f"[SUCCESS] Downloaded: {key}")[m
[32m+[m[32m#             if downloaded >= max_files:[m
[32m+[m[32m#                 logging.info("[LIMIT] Max file limit reached")[m
[32m+[m[32m#                 return True[m
[32m+[m[32m#         except Exception as e:[m
[32m+[m[32m#             logging.error(f"[ERROR] Failed to download {key}: {e}")[m
[32m+[m[32m#             continue[m
[32m+[m[32m#     return downloaded > 0[m
[32m+[m
[32m+[m[32m# def download_log(s3, bucket, prefix, pattern, local_path, max_files=500, cancel_event=None, task_id=None):[m
[32m+[m[32m#     logging.info(f"[START] Fetching logs from: s3://{bucket}/{prefix} with pattern '{pattern}'")[m
[32m+[m[32m#     matched_keys = list_matching_keys(s3, bucket, prefix, pattern, cancel_event, task_id)[m
[32m+[m[32m#     if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#         return None[m
[32m+[m[32m#     if not matched_keys:[m
[32m+[m[32m#         logging.warning(f"[SKIP] No matching keys for pattern '{pattern}' under {prefix}")[m
[32m+[m[32m#         shutil.rmtree(local_path, ignore_errors=True)[m
[32m+[m[32m#         return False[m
[32m+[m[32m#     return download_keys(s3, bucket, matched_keys, prefix, local_path, max_files, cancel_event, task_id)[m
[32m+[m
[32m+[m[32m# def download_api_access_logs(s3, bucket, base_prefix, pattern, local_path, max_files=500, cancel_event=None, task_id=None):[m
[32m+[m[32m#     logging.info(f"[START] Fetching API access logs from: s3://{bucket}/{base_prefix}/ with pattern '{pattern}'")[m
[32m+[m[32m#     ip_folders = list_folders(s3, bucket, base_prefix + '/')[m
[32m+[m[32m#     matched_keys = [][m
[32m+[m[32m#     with ThreadPoolExecutor(max_workers=8) as executor:[m
[32m+[m[32m#         future_to_ip = {[m
[32m+[m[32m#             executor.submit(list_matching_keys, s3, bucket, f"{base_prefix}/{ip}/", pattern, cancel_event, task_id): ip for ip in ip_folders[m
[32m+[m[32m#         }[m
[32m+[m[32m#         for future in as_completed(future_to_ip):[m
[32m+[m[32m#             if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#                 logging.warning("[CANCEL] API access download cancelled")[m
[32m+[m[32m#                 return None[m
[32m+[m[32m#             try:[m
[32m+[m[32m#                 keys = future.result()[m
[32m+[m[32m#                 matched_keys.extend(keys)[m
[32m+[m[32m#                 logging.debug(f"[MATCH] IP {future_to_ip[future]} matched {len(keys)} keys")[m
[32m+[m[32m#             except Exception as e:[m
[32m+[m[32m#                 logging.error(f"[ERROR] Failed for IP {future_to_ip[future]}: {e}")[m
[32m+[m[32m#                 continue[m
[32m+[m[32m#             if len(matched_keys) >= max_files:[m
[32m+[m[32m#                 logging.info("[LIMIT] Max file limit reached during API access logs fetch")[m
[32m+[m[32m#                 break[m
[32m+[m[32m#     if not matched_keys:[m
[32m+[m[32m#         logging.warning("[SKIP] No API access logs matched")[m
[32m+[m[32m#         shutil.rmtree(local_path, ignore_errors=True)[m
[32m+[m[32m#         return False[m
[32m+[m[32m#     return download_keys(s3, bucket, matched_keys, base_prefix + '/', local_path, max_files, cancel_event, task_id)[m
[32m+[m
[32m+[m[32m# def run_other_logs_fetch(date_str, env_id, selected_logs, cancel_event=None, task_id=None, task_metadata_ref=None):[m
[32m+[m[32m#     environments = ["US-PROD", "DE-PROD", "JP-PROD", "AU-PROD", "EU-PROD", "NTT Data PROD"][m
[32m+[m[32m#     date_obj = datetime.strptime(date_str, "%Y-%m-%d")[m
[32m+[m[32m#     formatted_date = date_obj.strftime("%d-%b-%Y")[m
[32m+[m[32m#     session_id = uuid.uuid4().hex[m
[32m+[m
[32m+[m[32m#     selected_account = s3_access.getEnvironment(date_obj, environments[env_id - 1])[m
[32m+[m[32m#     bucket = selected_account["bucketName"][m
[32m+[m[32m#     region = selected_account["awsRegion"][m
[32m+[m
[32m+[m[32m#     logging.info(f"[INIT] Using bucket: {bucket}, region: {region}")[m
[32m+[m[32m#     s3 = get_s3_client(selected_account["accessKey"], selected_account["secretKey"], region)[m
[32m+[m
[32m+[m[32m#     folder_path = f"/tmp/{formatted_date}_OtherLogs_{session_id}"[m
[32m+[m[32m#     os.makedirs(folder_path, exist_ok=True)[m
[32m+[m
[32m+[m[32m#     log_type_paths = {[m
[32m+[m[32m#         "BotsServiceAdmin Logs": ("bsa_ka", "BotsServiceAdmin"),[m
[32m+[m[32m#         "BotsServiceRuntime Logs": ("botServiceRuntimePath", "BotsServiceRuntime"),[m
[32m+[m[32m#         "Koreapp Logs": ("bsa_ka", "koreapp"),[m
[32m+[m[32m#         "FAQ Logs": ("faqlogsPath", ""),[m
[32m+[m[32m#         "ML Logs": ("mlLogsPath", ""),[m
[32m+[m[32m#         "app-logs": ("appAndProfileLogsPath", f"app-logs.log.{formatted_date[:2]}"),[m
[32m+[m[32m#         "profile-logs": ("appAndProfileLogsPath", f"profile-logs.log.{formatted_date[:2]}"),[m
[32m+[m[32m#         "Nginx Logs": ("appAndProfileLogsPath", "nginx"),[m
[32m+[m[32m#         "Api Access Logs": ("appAndProfileLogsPath", "api_access.log"),[m
[32m+[m[32m#         "Error Logs": ("appAndProfileLogsPath", "error.log")[m
[32m+[m[32m#     }[m
[32m+[m
[32m+[m[32m#     downloaded_types = [][m
[32m+[m[32m#     jobs = [][m
[32m+[m
[32m+[m[32m#     for i, index in enumerate(selected_logs):[m
[32m+[m[32m#         if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#             logging.warning("[CANCEL] Operation cancelled before job setup")[m
[32m+[m[32m#             shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m#             return None[m
[32m+[m
[32m+[m[32m#         log_name = selected_account["ListOfAvailableLogs"][int(index) - 1][m
[32m+[m[32m#         s3_key_field, pattern = log_type_paths[log_name][m
[32m+[m[32m#         prefix = selected_account[s3_key_field] + formatted_date[m
[32m+[m[32m#         local_log_path = os.path.join(folder_path, log_name.replace(" ", "_"))[m
[32m+[m
[32m+[m[32m#         # logging.info(f"[QUEUE] Preparing to fetch {log_name} from s3://{bucket}/{prefix} with pattern '{pattern}'")[m
[32m+[m
[32m+[m[32m#         if log_name == "Api Access Logs":[m
[32m+[m[32m#             jobs.append((download_api_access_logs, (s3, bucket, prefix, pattern, local_log_path, 500, cancel_event, task_id)))[m
[32m+[m[32m#         else:[m
[32m+[m[32m#             jobs.append((download_log, (s3, bucket, prefix, pattern, local_log_path, 500, cancel_event, task_id)))[m
[32m+[m
[32m+[m[32m#     with ThreadPoolExecutor(max_workers=8) as executor:[m
[32m+[m[32m#         futures = [executor.submit(fn, *args) for fn, args in jobs][m
[32m+[m[32m#         for i, future in enumerate(futures):[m
[32m+[m[32m#             if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#                 # logging.warning("[CANCEL] Mid-execution cancelled")[m
[32m+[m[32m#                 shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m#                 return None[m
[32m+[m[32m#             result = future.result()[m
[32m+[m[32m#             if result:[m
[32m+[m[32m#                 downloaded_types.append(selected_account["ListOfAvailableLogs"][int(selected_logs[i]) - 1])[m
[32m+[m[32m#             if task_metadata_ref and task_id:[m
[32m+[m[32m#                 task_metadata_ref[task_id]["progress"] = int((i + 1) / len(futures) * 100)[m
[32m+[m
[32m+[m[32m#     if cancel_event and cancel_event.is_set():[m
[32m+[m[32m#         # logging.warning("[CANCEL] Final check cancellation")[m
[32m+[m[32m#         shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m#         return None[m
[32m+[m
[32m+[m[32m#     if not downloaded_types:[m
[32m+[m[32m#         shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m#         raise Exception("No logs matched the given criteria.")[m
[32m+[m
[32m+[m[32m#     zip_filename = f"{formatted_date}_{'_'.join([t.replace(' ', '_') for t in downloaded_types])}.zip"[m
[32m+[m[32m#     zip_path = os.path.join("/tmp", zip_filename)[m
[32m+[m[32m#     logging.info(f"[ZIP] Creating zip at {zip_path}")[m
[32m+[m[32m#     shutil.make_archive(zip_path.replace(".zip", ""), 'zip', folder_path)[m
[32m+[m[32m#     shutil.rmtree(folder_path)[m
[32m+[m
[32m+[m[32m#     if task_metadata_ref and task_id:[m
[32m+[m[32m#         task_metadata_ref[task_id]["progress"] = 100[m
[32m+[m
[32m+[m[32m#     logging.info(f"[DONE] Logs packaged at {zip_path}")[m
[32m+[m[32m#     return zip_path[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# .................latest wotking one..............[m
[32m+[m
[32m+[m[32mimport os[m
[32m+[m[32mimport boto3[m
[32m+[m[32mimport shutil[m
[32m+[m[32mimport uuid[m
[32m+[m[32mfrom datetime import datetime[m
[32m+[m[32mfrom concurrent.futures import ThreadPoolExecutor, as_completed[m
[32m+[m[32mimport s3_access[m
[32m+[m
[32m+[m[32mdef get_s3_client(access_key, secret_key, region):[m
[32m+[m[32m    print(f"[DEBUG] Creating S3 client for region: {region}")[m
[32m+[m[32m    return boto3.client([m
[32m+[m[32m        's3',[m
[32m+[m[32m        aws_access_key_id=access_key,[m
[32m+[m[32m        aws_secret_access_key=secret_key,[m
[32m+[m[32m        region_name=region[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32mdef list_folders(s3, bucket, prefix):[m
[32m+[m[32m    print(f"[DEBUG] Listing folders in bucket: {bucket}, prefix: {prefix}")[m
[32m+[m[32m    paginator = s3.get_paginator('list_objects_v2')[m
[32m+[m[32m    result = paginator.paginate(Bucket=bucket, Prefix=prefix, Delimiter='/')[m
[32m+[m[32m    folders = [][m
[32m+[m[32m    for page in result:[m
[32m+[m[32m        if 'CommonPrefixes' in page:[m
[32m+[m[32m            for cp in page['CommonPrefixes']:[m
[32m+[m[32m                folder_name = cp['Prefix'].rstrip('/').split('/')[-1][m
[32m+[m[32m                print(f"[DEBUG] Found folder: {folder_name}")[m
[32m+[m[32m                folders.append(folder_name)[m
[32m+[m[32m    return folders[m
[32m+[m
[32m+[m[32mdef list_matching_keys(s3, bucket, prefix, pattern, cancel_event=None, task_id=None):[m
[32m+[m[32m    print(f"[DEBUG] Scanning S3 keys in {bucket}/{prefix} for pattern: {pattern}")[m
[32m+[m[32m    paginator = s3.get_paginator('list_objects_v2')[m
[32m+[m[32m    pages = paginator.paginate(Bucket=bucket, Prefix=prefix)[m
[32m+[m[32m    matched_keys = [][m
[32m+[m[32m    for page_index, page in enumerate(pages, 1):[m
[32m+[m[32m        if cancel_event and cancel_event.is_set():[m
[32m+[m[32m            print(f"[CANCELLED] Task {task_id} cancelled during S3 scan")[m
[32m+[m[32m            return [][m
[32m+[m[32m        contents = page.get('Contents', [])[m
[32m+[m[32m        for obj in contents:[m
[32m+[m[32m            if cancel_event and cancel_event.is_set():[m
[32m+[m[32m                print(f"[CANCELLED] Task {task_id} cancelled during object iteration")[m
[32m+[m[32m                return [][m
[32m+[m[32m            key = obj['Key'][m
[32m+[m[32m            if pattern in key:[m
[32m+[m[32m                print(f"[DEBUG] Matched Key: {key}")[m
[32m+[m[32m                matched_keys.append(key)[m
[32m+[m[32m    print(f"[DEBUG] Total matched keys: {len(matched_keys)}")[m
[32m+[m[32m    return matched_keys[m
[32m+[m
[32m+[m[32mdef download_keys(s3, bucket, matched_keys, prefix, local_path, max_files, cancel_event=None, task_id=None):[m
[32m+[m[32m    print(f"[DEBUG] Downloading {len(matched_keys)} keys to: {local_path}")[m
[32m+[m[32m    os.makedirs(local_path, exist_ok=True)[m
[32m+[m[32m    downloaded = 0[m
[32m+[m[32m    for key in matched_keys:[m
[32m+[m[32m        if cancel_event and cancel_event.is_set():[m
[32m+[m[32m            print(f"[CANCELLED] Task {task_id} cancelled while downloading")[m
[32m+[m[32m            shutil.rmtree(local_path, ignore_errors=True)[m
[32m+[m[32m            return None[m
[32m+[m[32m        rel_path = key.replace(prefix, '').lstrip('/')[m
[32m+[m[32m        local_file_path = os.path.join(local_path, rel_path)[m
[32m+[m[32m        print(f"[DEBUG] Downloading {key} to {local_file_path}")[m
[32m+[m[32m        print(f"[DEBUG] AWS CLI equivalent: aws s3 cp s3://{bucket}/{key} {local_file_path}")[m
[32m+[m[32m        os.makedirs(os.path.dirname(local_file_path), exist_ok=True)[m
[32m+[m[32m        try:[m
[32m+[m[32m            s3.download_file(bucket, key, local_file_path)[m
[32m+[m[32m            downloaded += 1[m
[32m+[m[32m            if downloaded >= max_files:[m
[32m+[m[32m                print(f"[DEBUG] Max file limit {max_files} reached.")[m
[32m+[m[32m                return True[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"[ERROR] Failed to download {key}: {e}")[m
[32m+[m[32m    return True if downloaded > 0 else False[m
[32m+[m
[32m+[m[32mdef download_log(s3, bucket, prefix, pattern, local_path, max_files=500, cancel_event=None, task_id=None):[m
[32m+[m[32m    matched_keys = list_matching_keys(s3, bucket, prefix, pattern, cancel_event, task_id)[m
[32m+[m[32m    if cancel_event and cancel_event.is_set():[m
[32m+[m[32m        print(f"[CANCELLED] Task {task_id} cancelled before download")[m
[32m+[m[32m        return None[m
[32m+[m[32m    if not matched_keys:[m
[32m+[m[32m        print(f"[DEBUG] No keys matched for prefix: {prefix}, pattern: {pattern}")[m
[32m+[m[32m        shutil.rmtree(local_path, ignore_errors=True)[m
[32m+[m[32m        return False[m
[32m+[m[32m    return download_keys(s3, bucket, matched_keys, prefix, local_path, max_files, cancel_event, task_id)[m
[32m+[m
[32m+[m[32mdef download_api_access_logs(s3, bucket, base_prefix, pattern, local_path, max_files=500, cancel_event=None, task_id=None):[m
[32m+[m[32m    print(f"[DEBUG] Scanning API access logs under: {bucket}/{base_prefix}")[m
[32m+[m[32m    ip_folders = list_folders(s3, bucket, base_prefix + '/')[m
[32m+[m[32m    matched_keys = [][m
[32m+[m[32m    with ThreadPoolExecutor(max_workers=8) as executor:[m
[32m+[m[32m        future_to_ip = {[m
[32m+[m[32m            executor.submit(list_matching_keys, s3, bucket, f"{base_prefix}/{ip}/", pattern, cancel_event, task_id): ip for ip in ip_folders[m
[32m+[m[32m        }[m
[32m+[m[32m        for future in as_completed(future_to_ip):[m
[32m+[m[32m            if cancel_event and cancel_event.is_set():[m
[32m+[m[32m                print(f"[CANCELLED] Task {task_id} cancelled during IP scan")[m
[32m+[m[32m                return None[m
[32m+[m[32m            try:[m
[32m+[m[32m                keys = future.result()[m
[32m+[m[32m                matched_keys.extend(keys)[m
[32m+[m[32m            except Exception as e:[m
[32m+[m[32m                print(f"[ERROR] Exception while scanning IP folder: {e}")[m
[32m+[m[32m            if len(matched_keys) >= max_files:[m
[32m+[m[32m                break[m
[32m+[m[32m    print(f"[DEBUG] Total matched API logs: {len(matched_keys)}")[m
[32m+[m[32m    if not matched_keys:[m
[32m+[m[32m        shutil.rmtree(local_path, ignore_errors=True)[m
[32m+[m[32m        return False[m
[32m+[m[32m    return download_keys(s3, bucket, matched_keys, base_prefix + '/', local_path, max_files, cancel_event, task_id)[m
[32m+[m
[32m+[m[32mdef run_other_logs_fetch(date_str, env_id, selected_logs, cancel_event=None, task_id=None, task_metadata_ref=None):[m
[32m+[m[32m    # environments = ["US-PROD", "DE-PROD", "JP-PROD", "AU-PROD", "EU-PROD", "NTT Data PROD"][m
[32m+[m[32m    environments = ["US-PROD", "DE-PROD", "AU-PROD", "EU-PROD"][m
[32m+[m
[32m+[m[32m    date_obj = datetime.strptime(date_str, "%Y-%m-%d")[m
[32m+[m[32m    formatted_date = date_obj.strftime("%d-%b-%Y")[m
[32m+[m[32m    session_id = uuid.uuid4().hex[m
[32m+[m
[32m+[m[32m    selected_account = s3_access.getEnvironment(date_obj, environments[env_id - 1])[m
[32m+[m[32m    bucket = selected_account["bucketName"][m
[32m+[m[32m    region = selected_account["awsRegion"][m
[32m+[m
[32m+[m[32m    print(f"[DEBUG] Task {task_id} - Using bucket: {bucket}, region: {region}")[m
[32m+[m
[32m+[m[32m    s3 = get_s3_client(selected_account["accessKey"], selected_account["secretKey"], region)[m
[32m+[m
[32m+[m[32m    folder_path = f"/tmp/{formatted_date}_OtherLogs_{session_id}"[m
[32m+[m[32m    print(f"[DEBUG] Task {task_id} - Temp download folder: {folder_path}")[m
[32m+[m[32m    os.makedirs(folder_path, exist_ok=True)[m
[32m+[m
[32m+[m[32m    log_type_paths = {[m
[32m+[m[32m        "BotsServiceAdmin Logs": ("bsa_ka", "BotsServiceAdmin"),[m
[32m+[m[32m        "BotsServiceRuntime Logs": ("botServiceRuntimePath", "BotsServiceRuntime"),[m
[32m+[m[32m        "Koreapp Logs": ("bsa_ka", "koreapp"),[m
[32m+[m[32m        "FAQ Logs": ("faqlogsPath", ""),[m
[32m+[m[32m        "ML Logs": ("mlLogsPath", ""),[m
[32m+[m[32m        "app-logs": ("appAndProfileLogsPath", f"app-logs.log.{formatted_date[:2]}"),[m
[32m+[m[32m        "profile-logs": ("appAndProfileLogsPath", f"profile-logs.log.{formatted_date[:2]}"),[m
[32m+[m[32m        "Nginx Logs": ("appAndProfileLogsPath", "nginx"),[m
[32m+[m[32m        "Api Access Logs": ("appAndProfileLogsPath", "api_access.log"),[m
[32m+[m[32m        "Error Logs": ("appAndProfileLogsPath", "error.log")[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    downloaded_types = [][m
[32m+[m[32m    jobs = [][m
[32m+[m
[32m+[m[32m    for i, index in enumerate(selected_logs):[m
[32m+[m[32m        if cancel_event and cancel_event.is_set():[m
[32m+[m[32m            print(f"[CANCELLED] Task {task_id} cancelled before job dispatch")[m
[32m+[m[32m            shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m            return None[m
[32m+[m
[32m+[m[32m        log_name = selected_account["ListOfAvailableLogs"][int(index) - 1][m
[32m+[m[32m        s3_key_field, pattern = log_type_paths[log_name][m
[32m+[m[32m        prefix = selected_account[s3_key_field] + formatted_date[m
[32m+[m[32m        print(f"[DEBUG] Task {task_id} - Preparing job for: {log_name}, Prefix: {prefix}, Pattern: {pattern}")[m
[32m+[m
[32m+[m[32m        local_log_path = os.path.join(folder_path, log_name.replace(" ", "_"))[m
[32m+[m
[32m+[m[32m        if log_name == "Api Access Logs":[m
[32m+[m[32m            jobs.append((download_api_access_logs, (s3, bucket, prefix, pattern, local_log_path, 500, cancel_event, task_id)))[m
[32m+[m[32m        else:[m
[32m+[m[32m            jobs.append((download_log, (s3, bucket, prefix, pattern, local_log_path, 500, cancel_event, task_id)))[m
[32m+[m
[32m+[m[32m    with ThreadPoolExecutor(max_workers=8) as executor:[m
[32m+[m[32m        futures = [executor.submit(fn, *args) for fn, args in jobs][m
[32m+[m[32m        for i, future in enumerate(futures):[m
[32m+[m[32m            if cancel_event and cancel_event.is_set():[m
[32m+[m[32m                print(f"[CANCELLED] Task {task_id} cancelled during execution")[m
[32m+[m[32m                shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m                return None[m
[32m+[m[32m            result = future.result()[m
[32m+[m[32m            if cancel_event and cancel_event.is_set():[m
[32m+[m[32m                print(f"[CANCELLED] Task {task_id} cancelled post job")[m
[32m+[m[32m                shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m                return None[m
[32m+[m[32m            if result:[m
[32m+[m[32m                downloaded_types.append(selected_account["ListOfAvailableLogs"][int(selected_logs[i]) - 1])[m
[32m+[m[32m            if task_metadata_ref and task_id:[m
[32m+[m[32m                progress = int((i + 1) / len(futures) * 100)[m
[32m+[m[32m                task_metadata_ref[task_id]["progress"] = progress[m
[32m+[m[32m                print(f"[DEBUG] Task {task_id} - Progress: {progress}%")[m
[32m+[m
[32m+[m[32m    if cancel_event and cancel_event.is_set():[m
[32m+[m[32m        print(f"[CANCELLED] Task {task_id} cancelled after download")[m
[32m+[m[32m        shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m        return None[m
[32m+[m
[32m+[m[32m    if not downloaded_types:[m
[32m+[m[32m        print(f"[ERROR] Task {task_id} - No logs matched")[m
[32m+[m[32m        shutil.rmtree(folder_path, ignore_errors=True)[m
[32m+[m[32m        raise Exception("No logs matched the given criteria.")[m
[32m+[m
[32m+[m[32m    zip_filename = f"{formatted_date}_{'_'.join([t.replace(' ', '_') for t in downloaded_types])}.zip"[m
[32m+[m[32m    zip_path = os.path.join("/tmp", zip_filename)[m
[32m+[m[32m    shutil.make_archive(zip_path.replace(".zip", ""), 'zip', folder_path)[m
[32m+[m[32m    shutil.rmtree(folder_path)[m
[32m+[m
[32m+[m[32m    if task_metadata_ref and task_id:[m
[32m+[m[32m        task_metadata_ref[task_id]["progress"] = 100[m
[32m+[m[32m        print(f"[DEBUG] Task {task_id} - Final progress: 100%")[m
[32m+[m
[32m+[m[32m    print(f"[DEBUG] Task {task_id} - Log download completed. Zip path: {zip_path}")[m
[32m+[m[32m    return zip_path[m
[32m+[m
[32m+[m
[1mdiff --git a/requirements.txt b/requirements.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..0f12677[m
[1m--- /dev/null[m
[1m+++ b/requirements.txt[m
[36m@@ -0,0 +1,104 @@[m
[32m+[m[32mannotated-types==0.7.0[m
[32m+[m[32manyio==4.9.0[m
[32m+[m[32mattrs==23.2.0[m
[32m+[m[32mBabel==2.10.3[m
[32m+[m[32mbcc==0.29.1[m
[32m+[m[32mbeautifulsoup4==4.12.3[m
[32m+[m[32mblinker==1.9.0[m
[32m+[m[32mboto3==1.34.46[m
[32m+[m[32mbotocore==1.34.46[m
[32m+[m[32mBrlapi==0.8.5[m
[32m+[m[32mcertifi==2023.11.17[m
[32m+[m[32mchardet==5.2.0[m
[32m+[m[32mclick==8.1.6[m
[32m+[m[32mcloud-init==25.1.2[m
[32m+[m[32mcolorama==0.4.6[m
[32m+[m[32mcommand-not-found==0.3[m
[32m+[m[32mconfigobj==5.0.8[m
[32m+[m[32mcryptography==41.0.7[m
[32m+[m[32mcssselect==1.2.0[m
[32m+[m[32mcupshelpers==1.0[m
[32m+[m[32mdbus-python==1.3.2[m
[32m+[m[32mdefer==1.0.6[m
[32m+[m[32mdistro==1.9.0[m
[32m+[m[32mdistro-info==1.7+build1[m
[32m+[m[32mFlask==3.1.1[m
[32m+[m[32mfuse-python==1.0.7[m
[32m+[m[32mgyp==0.1[m
[32m+[m[32mh11==0.16.0[m
[32m+[m[32mhtml5lib==1.1[m
[32m+[m[32mhttpcore==1.0.9[m
[32m+[m[32mhttplib2==0.20.4[m
[32m+[m[32mhttpx==0.28.1[m
[32m+[m[32midna==3.6[m
[32m+[m[32mitsdangerous==2.2.0[m
[32m+[m[32mJinja2==3.1.2[m
[32m+[m[32mjiter==0.10.0[m
[32m+[m[32mjmespath==1.0.1[m
[32m+[m[32mjsonpatch==1.32[m
[32m+[m[32mjsonpointer==2.0[m
[32m+[m[32mjsonschema==4.10.3[m
[32m+[m[32mlanguage-selector==0.1[m
[32m+[m[32mlaunchpadlib==1.11.0[m
[32m+[m[32mlazr.restfulclient==0.14.6[m
[32m+[m[32mlazr.uri==1.0.6[m
[32m+[m[32mlouis==3.29.0[m
[32m+[m[32mlxml==5.2.1[m
[32m+[m[32mmarkdown-it-py==3.0.0[m
[32m+[m[32mMarkupSafe==2.1.5[m
[32m+[m[32mmdurl==0.1.2[m
[32m+[m[32mnetaddr==0.8.0[m
[32m+[m[32mnetifaces==0.11.0[m
[32m+[m[32mnumpy==1.26.4[m
[32m+[m[32moauthlib==3.2.2[m
[32m+[m[32molefile==0.46[m
[32m+[m[32mopenai==1.81.0[m
[32m+[m[32mpexpect==4.9.0[m
[32m+[m[32mpillow==10.2.0[m
[32m+[m[32mplyer==2.1.0[m
[32m+[m[32mptyprocess==0.7.0[m
[32m+[m[32mpycairo==1.25.1[m
[32m+[m[32mpycups==2.0.1[m
[32m+[m[32mpydantic==2.11.4[m
[32m+[m[32mpydantic_core==2.33.2[m
[32m+[m[32mPygments==2.17.2[m
[32m+[m[32mPyGObject==3.48.2[m
[32m+[m[32mPyJWT==2.7.0[m
[32m+[m[32mpylibacl==0.7.0[m
[32m+[m[32mPyMuPDF==1.23.7[m
[32m+[m[32mpyparsing==3.1.1[m
[32m+[m[32mPyQt5==5.15.10[m
[32m+[m[32mPyQt5-sip==12.13.0[m
[32m+[m[32mpyrsistent==0.20.0[m
[32m+[m[32mpyserial==3.5[m
[32m+[m[32mpython-apt==2.7.7+ubuntu4[m
[32m+[m[32mpython-dateutil==2.8.2[m
[32m+[m[32mpython-debian==0.1.49+ubuntu2[m
[32m+[m[32mpython-dotenv==1.1.0[m
[32m+[m[32mpytz==2024.1[m
[32m+[m[32mpyxattr==0.8.1[m
[32m+[m[32mpyxdg==0.28[m
[32m+[m[32mPyYAML==6.0.1[m
[32m+[m[32mrequests==2.31.0[m
[32m+[m[32mrich==13.7.1[m
[32m+[m[32ms3transfer==0.10.1[m
[32m+[m[32msetuptools==68.1.2[m
[32m+[m[32msix==1.16.0[m
[32m+[m[32msniffio==1.3.1[m
[32m+[m[32msoupsieve==2.5[m
[32m+[m[32msystemd-python==235[m
[32m+[m[32mtornado==6.4[m
[32m+[m[32mtqdm==4.67.1[m
[32m+[m[32mtyping-inspection==0.4.1[m
[32m+[m[32mtyping_extensions==4.13.2[m
[32m+[m[32mubuntu-drivers-common==0.0.0[m
[32m+[m[32mubuntu-pro-client==8001[m
[32m+[m[32mufw==0.36.2[m
[32m+[m[32munattended-upgrades==0.1[m
[32m+[m[32murllib3==2.0.7[m
[32m+[m[32mwadllib==1.3.6[m
[32m+[m[32mwebencodings==0.5.1[m
[32m+[m[32mWerkzeug==3.1.3[m
[32m+[m[32mwheel==0.42.0[m
[32m+[m[32mxdg==5[m
[32m+[m[32mxkit==0.0.0[m
[1mdiff --git a/s3_access.py b/s3_access.py[m
[1mnew file mode 100644[m
[1mindex 0000000..07d9f48[m
[1m--- /dev/null[m
[1m+++ b/s3_access.py[m
[36m@@ -0,0 +1,211 @@[m
[32m+[m[32m# def getEnvironment(date, selected_env):[m
[32m+[m[32m#     year = date.strftime("%Y")[m
[32m+[m[32m#     env_region = selected_env[:2][m
[32m+[m
[32m+[m[32m#     # Determine root folder[m
[32m+[m[32m#     if env_region == "US":[m
[32m+[m[32m#         root_folder = "SegBots"[m
[32m+[m[32m#     else:[m
[32m+[m[32m#         root_folder = f"SegBots-{env_region}"[m
[32m+[m
[32m+[m[32m#     result = dict()[m
[32m+[m
[32m+[m[32m#     if selected_env != "NTT Data PROD":[m
[32m+[m[32m#         result["Environment"] = selected_env[m
[32m+[m[32m#         result["accessKey"] = "REDACTED_AKIAVG7"[m
[32m+[m[32m#         result["secretKey"] = "REDACTED_SECRET1"[m
[32m+[m[32m#         result["bucketName"] = f"{env_region.lower()}-prod-chatscriptlogs"[m
[32m+[m
[32m+[m[32m#         # Paths for CS Logs[m
[32m+[m[32m#         result["cslogsPath"] = f"{root_folder}/CSLogs/{year}/"[m
[32m+[m[32m#         result["otherlogsPath"] = f"{root_folder}/OtherLogs/{year}/"[m
[32m+[m
[32m+[m[32m#         # Paths for specific other logs[m
[32m+[m[32m#         result["botServiceRuntimePath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[32m+[m[32m#         result["bsa_ka"] = f"{root_folder}/NodeServiceLogs/BotsAnalytics/{year}/"[m
[32m+[m[32m#         result["faqlogsPath"] = f"{root_folder}/FAQ/{year}/"[m
[32m+[m[32m#         result["mlLogsPath"] = f"{root_folder}/ML-Logs/{year}/"[m
[32m+[m[32m#         result["appAndProfileLogsPath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[32m+[m[32m#     else:[m
[32m+[m[32m#         # NTT-specific config[m
[32m+[m[32m#         result["Environment"] = "NTT Data PROD"[m
[32m+[m[32m#         result["accessKey"] = "REDACTED_AKIAU6"[m
[32m+[m[32m#         result["secretKey"] = "REDACTED_SECRET2"[m
[32m+[m[32m#         result["bucketName"] = "ntt-logs"[m
[32m+[m
[32m+[m[32m#         result["cslogsPath"] = f"NTT-PROD/CSLogs/{year}/"[m
[32m+[m[32m#         result["otherlogsPath"] = f"NTT-PROD/OtherLogs/{year}/"[m
[32m+[m
[32m+[m[32m#         # NTT other log paths[m
[32m+[m[32m#         result["botServiceRuntimePath"] = "NTT-PROD/NodeServiceLogs/"[m
[32m+[m[32m#         result["bsa_ka"] = "NTT-PROD/NodeServiceLogs/"[m
[32m+[m[32m#         result["faqlogsPath"] = f"NTT-PROD/FAQ/{year}/"[m
[32m+[m[32m#         result["mlLogsPath"] = f"NTT-PROD/ML-Logs/{year}/"[m
[32m+[m[32m#         result["appAndProfileLogsPath"] = "NTT-PROD/NodeServiceLogs/"[m
[32m+[m
[32m+[m[32m#     # Override US-PROD bucket if needed[m
[32m+[m[32m#     if selected_env == "US-PROD":[m
[32m+[m[32m#         result["bucketName"] = "Prod-ChatScriptLogs"[m
[32m+[m[32m#         result["cslogsPath"] = f"SegBots/CSLogs/{year}/"[m
[32m+[m[32m#         result["otherlogsPath"] = f"SegBots/OtherLogs/{year}/"[m
[32m+[m
[32m+[m[32m#     # Optional: List of available log types for UI[m
[32m+[m[32m#     result["ListOfAvailableLogs"] = [[m
[32m+[m[32m#         "BotsServiceAdmin Logs",[m
[32m+[m[32m#         "BotsServiceRuntime Logs",[m
[32m+[m[32m#         "Koreapp Logs",[m
[32m+[m[32m#         "FAQ Logs",[m
[32m+[m[32m#         "ML Logs",[m
[32m+[m[32m#         "app-logs",[m
[32m+[m[32m#         "profile-logs",[m
[32m+[m[32m#         "Nginx Logs",[m
[32m+[m[32m#         "Api Access Logs",[m
[32m+[m[32m#         "Error Logs"[m
[32m+[m[32m#     ][m
[32m+[m
[32m+[m[32m#     return result[m
[32m+[m
[32m+[m[32m#-----------------------\[m
[32m+[m
[32m+[m
[32m+[m[32mdef getEnvironment(date, selected_env):[m
[32m+[m[32m    year = date.strftime("%Y")[m
[32m+[m[32m    env_region = selected_env[:2][m
[32m+[m
[32m+[m[32m    # Determine root folder[m
[32m+[m[32m    if env_region == "US":[m
[32m+[m[32m        root_folder = "SegBots"[m
[32m+[m[32m    else:[m
[32m+[m[32m        root_folder = f"SegBots-{env_region}"[m
[32m+[m
[32m+[m[32m    # Map region code to AWS region[m
[32m+[m[32m    # region_map = {[m
[32m+[m[32m    #     "US": "us-east-1",[m
[32m+[m[32m    #     "DE": "eu-central-1",[m
[32m+[m[32m    #     "JP": "ap-northeast-1",[m
[32m+[m[32m    #     "AU": "ap-southeast-2",[m
[32m+[m[32m    #     "EU": "eu-west-1",[m
[32m+[m[32m    #     "NT": "ap-south-1"  # Adjust as needed for NTT[m
[32m+[m[32m    # }[m
[32m+[m[32m    region_map = {[m
[32m+[m[32m        "US": "us-east-1",[m
[32m+[m[32m        "DE": "eu-central-1",[m
[32m+[m[32m        "AU": "ap-southeast-2",[m
[32m+[m[32m        "EU": "eu-west-1"[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    aws_region = region_map.get(env_region, "us-east-1")[m
[32m+[m
[32m+[m[32m    result = dict()[m
[32m+[m
[32m+[m[32m    if selected_env != "NTT Data PROD":[m
[32m+[m[32m        result["Environment"] = selected_env[m
[32m+[m[32m        result["accessKey"] = "REDACTED_AKIAVG7"[m
[32m+[m[32m        result["secretKey"] = "REDACTED_SECRET1"[m
[32m+[m[32m        result["bucketName"] = f"{env_region.lower()}-prod-chatscriptlogs"[m
[32m+[m[32m        result["awsRegion"] = aws_region[m
[32m+[m
[32m+[m[32m        # Paths for CS Logs[m
[32m+[m[32m        result["cslogsPath"] = f"{root_folder}/CSLogs/{year}/"[m
[32m+[m[32m        result["otherlogsPath"] = f"{root_folder}/OtherLogs/{year}/"[m
[32m+[m[41m        [m
[32m+[m[32m        if selected_env in ("DE-PROD", "EU-PROD" , "AU-PROD" ):[m
[32m+[m[32m       # Paths for specific other logs[m
[32m+[m[32m            result["botServiceRuntimePath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[32m+[m[32m            result["bsa_ka"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[32m+[m
[32m+[m[32m        else :[m
[32m+[m[32m          result["botServiceRuntimePath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[32m+[m[32m          result["bsa_ka"] = f"{root_folder}/NodeServiceLogs/BotsAnalytics/{year}/"[m[41m [m
[32m+[m
[32m+[m
[32m+[m[41m          [m
[32m+[m[32m        result["faqlogsPath"] = f"{root_folder}/FAQ/{year}/"[m
[32m+[m[32m        result["mlLogsPath"] = f"{root_folder}/ML-Logs/{year}/"[m
[32m+[m[32m        result["appAndProfileLogsPath"] = f"{root_folder}/NodeServiceLogs/BotsApp/{year}/"[m
[32m+[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m    else:[m
[32m+[m[32m        result["Environment"] = "NTT Data PROD"[m
[32m+[m[32m        result["accessKey"] = "REDACTED_AKIAU6"[m
[32m+[m[32m        result["secretKey"] = "REDACTED_SECRET2"[m
[32m+[m[32m        result["bucketName"] = "ntt-logs"[m
[32m+[m[32m        result["awsRegion"] = aws_region[m
[32m+[m
[32m+[m[32m        result["cslogsPath"] = f"NTT-PROD/CSLogs/{year}/"[m
[32m+[m[32m        result["otherlogsPath"] = f"NTT-PROD/OtherLogs/{year}/"[m
[32m+[m
[32m+[m[32m        # NTT other log paths[m
[32m+[m[32m        result["botServiceRuntimePath"] = "NTT-PROD/NodeServiceLogs/"[m
[32m+[m[32m        result["bsa_ka"] = "NTT-PROD/NodeServiceLogs/"[m
[32m+[m[32m        result["faqlogsPath"] = f"NTT-PROD/FAQ/{year}/"[m
[32m+[m[32m        result["mlLogsPath"] = f"NTT-PROD/ML-Logs/{year}/"[m
[32m+[m[32m        result["appAndProfileLogsPath"] = "NTT-PROD/NodeServiceLogs/"[m
[32m+[m
[32m+[m[32m    # Override US-PROD bucket if needed[m
[32m+[m[32m    if selected_env == "US-PROD":[m
[32m+[m[32m        result["bucketName"] = "Prod-ChatScriptLogs"[m
[32m+[m[32m        result["cslogsPath"] = f"SegBots/CSLogs/{year}/"[m
[32m+[m[32m        result["otherlogsPath"] = f"SegBots/OtherLogs/{year}/"[m
[32m+[m
[32m+[m[32m    # Optional: List of available log types for UI[m
[32m+[m[32m    result["ListOfAvailableLogs"] = [[m
[32m+[m[32m        "BotsServiceAdmin Logs",[m
[32m+[m[32m        "BotsServiceRuntime Logs",[m
[32m+[m[32m        "Koreapp Logs",[m
[32m+[m[32m        "FAQ Logs",[m
[32m+[m[32m        "ML Logs",[m
[32m+[m[32m        "app-logs",[m
[32m+[m[32m        "profile-logs",[m
[32m+[m[32m        "Nginx Logs",[m
[32m+[m[32m        "Api Access Logs",[m
[32m+[m[32m        "Error Logs"[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    return result[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#--------------------[m
[32m+[m
[32m+[m[32m# def getEnvironment(date_obj, env_name):[m
[32m+[m[32m#     region_map = {[m
[32m+[m[32m#         "US-PROD": "us-east-1",[m
[32m+[m[32m#         "DE-PROD": "eu-central-1",[m
[32m+[m[32m#         "JP-PROD": "ap-northeast-1",[m
[32m+[m[32m#         "AU-PROD": "ap-southeast-2",[m
[32m+[m[32m#         "EU-PROD": "eu-west-1",[m
[32m+[m[32m#         "NTT Data PROD": "ap-south-1"   # Or whatever is correct[m
[32m+[m[32m#     }[m
[32m+[m
[32m+[m[32m#     bucket = "Prod-ChatScriptLogs"  # your actual bucket[m
[32m+[m[32m#     region = region_map.get(env_name)[m
[32m+[m
[32m+[m[32m#     if not region:[m
[32m+[m[32m#         raise Exception(f"Invalid AWS region mapping for environment: {env_name}")[m
[32m+[m
[32m+[m[32m#     return {[m
[32m+[m[32m#         "awsRegion": region,[m
[32m+[m[32m#         "bucketName": bucket,[m
[32m+[m[32m#         # Include your s3 key paths here like:[m
[32m+[m[32m#         "bsa_ka": "SegBots/NodeServiceLogs/BotsAnalytics/",[m
[32m+[m[32m#         "botServiceRuntimePath": "SegBots/NodeServiceLogs/BotsApp/",[m
[32m+[m[32m#         "faqlogsPath": "SegBots/NodeServiceLogs/BotsFaq/",[m
[32m+[m[32m#         "mlLogsPath": "SegBots/NodeServiceLogs/MLService/",[m
[32m+[m[32m#         "appAndProfileLogsPath": "SegBots/NodeServiceLogs/BotsApp/",[m
[32m+[m[32m#         "ListOfAvailableLogs": [[m
[32m+[m[32m#             "BotsServiceAdmin Logs",[m
[32m+[m[32m#             "BotsServiceRuntime Logs",[m
[32m+[m[32m#             "Koreapp Logs",[m
[32m+[m[32m#             "FAQ Logs",[m
[32m+[m[32m#             "ML Logs",[m
[32m+[m[32m#             "app-logs",[m
[32m+[m[32m#             "profile-logs",[m
[32m+[m[32m#             "Nginx Logs",[m
[32m+[m[32m#             "Api Access Logs",[m
[32m+[m[32m#             "Error Logs"[m
[32m+[m[32m#         ][m
[32m+[m[32m#     }[m
[32m+[m
[1mdiff --git a/templates/form.html b/templates/form.html[m
[1mnew file mode 100644[m
[1mindex 0000000..7e8bb92[m
[1m--- /dev/null[m
[1m+++ b/templates/form.html[m
[36m@@ -0,0 +1,568 @@[m
[32m+[m[32m<!-- <!DOCTYPE html>[m
[32m+[m[32m<html lang="en">[m
[32m+[m[32m<head>[m
[32m+[m[32m  <meta charset="UTF-8" />[m
[32m+[m[32m  <title>Logs Downloader</title>[m
[32m+[m[32m  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />[m
[32m+[m[32m  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />[m
[32m+[m[32m  <style>[m
[32m+[m[32m    :root {[m
[32m+[m[32m      --bg-color: #ffffff;[m
[32m+[m[32m      --text-color: #000000;[m
[32m+[m[32m      --container-bg: #ffffff;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    body.dark-mode {[m
[32m+[m[32m      --bg-color: #1f1f1f;[m
[32m+[m[32m      --text-color: #e0e0e0;[m
[32m+[m[32m      --container-bg: #2c2c2c;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    body {[m
[32m+[m[32m      background-color: var(--bg-color);[m
[32m+[m[32m      color: var(--text-color);[m
[32m+[m[32m      transition: background-color 0.3s ease, color 0.3s ease;[m
[32m+[m[32m      font-family: 'Segoe UI', sans-serif;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    .tab-container {[m
[32m+[m[32m      max-width: 800px;[m
[32m+[m[32m      margin: 40px auto;[m
[32m+[m[32m      background: var(--container-bg);[m
[32m+[m[32m      padding: 30px;[m
[32m+[m[32m      border-radius: 12px;[m
[32m+[m[32m      box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.1);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    .tab-header {[m
[32m+[m[32m      font-weight: 600;[m
[32m+[m[32m      font-size: 1.5rem;[m
[32m+[m[32m      margin-bottom: 20px;[m
[32m+[m[32m      display: flex;[m
[32m+[m[32m      align-items: center;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    .tab-header i {[m
[32m+[m[32m      margin-right: 10px;[m
[32m+[m[32m      color: #0d6efd;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    .theme-toggle {[m
[32m+[m[32m      position: absolute;[m
[32m+[m[32m      top: 20px;[m
[32m+[m[32m      right: 30px;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    #loadingSpinner, #otherSpinner {[m
[32m+[m[32m      display: none;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    .toast-container {[m
[32m+[m[32m      position: fixed;[m
[32m+[m[32m      bottom: 20px;[m
[32m+[m[32m      right: 20px;[m
[32m+[m[32m      z-index: 1055;[m
[32m+[m[32m    }[m
[32m+[m[32m  </style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m[32m  <button class="btn btn-outline-secondary theme-toggle" onclick="toggleTheme()">🌙 / ☀️</button>[m
[32m+[m
[32m+[m[32m  <div class="tab-container">[m
[32m+[m[32m    <ul class="nav nav-tabs" id="logTabs" role="tablist">[m
[32m+[m[32m      <li class="nav-item" role="presentation">[m
[32m+[m[32m        <button class="nav-link active" id="cs-tab" data-bs-toggle="tab" data-bs-target="#cs" type="button" role="tab">🔍 CS Logs</button>[m
[32m+[m[32m      </li>[m
[32m+[m[32m      <li class="nav-item" role="presentation">[m
[32m+[m[32m        <button class="nav-link" id="other-tab" data-bs-toggle="tab" data-bs-target="#other" type="button" role="tab">🧩 Other Logs</button>[m
[32m+[m[32m      </li>[m
[32m+[m[32m    </ul>[m
[32m+[m[32m    <div class="tab-content mt-4" id="logTabsContent">[m
[32m+[m[32m      <div class="tab-pane fade show active" id="cs" role="tabpanel">[m
[32m+[m[32m        <div class="tab-header"><i class="fas fa-robot"></i>CS Logs Downloader</div>[m
[32m+[m[32m        <form id="logForm">[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label for="date" class="form-label">📅 Select Date:</label>[m
[32m+[m[32m            <input type="date" class="form-control" name="date" id="date" required />[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label class="form-label">🌍 Environment:</label>[m
[32m+[m[32m            <select name="env" class="form-select" required>[m
[32m+[m[32m              <option value="1">US-PROD</option>[m
[32m+[m[32m              <option value="2">DE-PROD</option>[m
[32m+[m[32m              <option value="3">JP-PROD</option>[m
[32m+[m[32m              <option value="4">AU-PROD</option>[m
[32m+[m[32m              <option value="5">EU-PROD</option>[m
[32m+[m[32m              <option value="6">NTT Data PROD</option>[m
[32m+[m[32m            </select>[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label for="sidcid" class="form-label">🆔 Bot ID + User ID:</label>[m
[32m+[m[32m            <input type="text" class="form-control" name="sidcid" id="sidcid" placeholder="e.g. st-xxx+u-yyy" required />[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label class="form-label">🌐 Language:</label>[m
[32m+[m[32m            <select name="lang" class="form-select" required>[m
[32m+[m[32m              <option value="1">English-LOGS</option>[m
[32m+[m[32m              <option value="2">English-Regression-LOGS</option>[m
[32m+[m[32m              <option value="3">USERS-English-Regression</option>[m
[32m+[m[32m              <option value="4">USERS-English</option>[m
[32m+[m[32m              <option value="5">USERS-french</option>[m
[32m+[m[32m              <option value="6">USERS-german</option>[m
[32m+[m[32m              <option value="7">USERS-multilang</option>[m
[32m+[m[32m              <option value="8">USERS-spanish</option>[m
[32m+[m[32m              <option value="9">french-LOGS</option>[m
[32m+[m[32m              <option value="10">german-LOGS</option>[m
[32m+[m[32m              <option value="11">multilang-LOGS</option>[m
[32m+[m[32m              <option value="12">spanish-LOGS</option>[m
[32m+[m[32m              <option value="13">All languages</option>[m
[32m+[m[32m            </select>[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="d-grid">[m
[32m+[m[32m            <button type="submit" class="btn btn-primary btn-lg">⬇️ Download Logs</button>[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="text-center mt-3">[m
[32m+[m[32m            <div class="spinner-border text-primary" role="status" id="loadingSpinner">[m
[32m+[m[32m              <span class="visually-hidden">Loading...</span>[m
[32m+[m[32m            </div>[m
[32m+[m[32m            <p id="statusText" class="text-muted mt-2"></p>[m
[32m+[m[32m          </div>[m
[32m+[m[32m        </form>[m
[32m+[m[32m      </div>[m
[32m+[m
[32m+[m[32m      <div class="tab-pane fade" id="other" role="tabpanel">[m
[32m+[m[32m        <div class="tab-header"><i class="fas fa-layer-group"></i>Other Logs Downloader</div>[m
[32m+[m[32m        <form id="otherForm">[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label class="form-label">📅 Select Date:</label>[m
[32m+[m[32m            <input type="date" class="form-control" name="date" required />[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label class="form-label">🌍 Region:</label>[m
[32m+[m[32m            <select name="env" class="form-select" required>[m
[32m+[m[32m              <option value="1">US-PROD</option>[m
[32m+[m[32m              <option value="2">DE-PROD</option>[m
[32m+[m[32m              <option value="3">JP-PROD</option>[m
[32m+[m[32m              <option value="4">AU-PROD</option>[m
[32m+[m[32m              <option value="5">EU-PROD</option>[m
[32m+[m[32m              <option value="6">NTT Data PROD</option>[m
[32m+[m[32m            </select>[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label class="form-label">📝 Select Logs:</label>[m
[32m+[m[32m            <select name="logs" class="form-select" required>[m
[32m+[m[32m              <option value="1">BotsServiceAdmin Logs</option>[m
[32m+[m[32m              <option value="2">BotsServiceRuntime Logs</option>[m
[32m+[m[32m              <option value="3">Koreapp Logs</option>[m
[32m+[m[32m              <option value="4">FAQ Logs</option>[m
[32m+[m[32m              <option value="5">ML Logs</option>[m
[32m+[m[32m              <option value="6">app-logs</option>[m
[32m+[m[32m              <option value="7">profile-logs</option>[m
[32m+[m[32m              <option value="8">Nginx Logs</option>[m
[32m+[m[32m              <option value="9">Api Access Logs</option>[m
[32m+[m[32m              <option value="10">Error Logs</option>[m
[32m+[m[32m            </select>[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="d-grid">[m
[32m+[m[32m            <button type="submit" class="btn btn-success btn-lg">⬇️ Download Other Logs</button>[m
[32m+[m[32m          </div>[m
[32m+[m
[32m+[m[32m          <div class="text-center mt-3">[m
[32m+[m[32m            <div class="spinner-border text-success" role="status" id="otherSpinner" style="display: none">[m
[32m+[m[32m              <span class="visually-hidden">Loading...</span>[m
[32m+[m[32m            </div>[m
[32m+[m[32m            <p id="otherStatusText" class="text-muted mt-2"></p>[m
[32m+[m[32m          </div>[m
[32m+[m[32m        </form>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    </div>[m
[32m+[m[32m  </div>[m
[32m+[m
[32m+[m[32m  <div class="toast-container position-fixed bottom-0 end-0 p-3">[m
[32m+[m[32m    <div id="successToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">[m
[32m+[m[32m      <div class="d-flex">[m
[32m+[m[32m        <div class="toast-body">[m
[32m+[m[32m          ✅ Logs downloaded successfully.[m
[32m+[m[32m        </div>[m
[32m+[m[32m        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    </div>[m
[32m+[m[32m  </div>[m
[32m+[m
[32m+[m[32m  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>[m
[32m+[m[32m  <script>[m
[32m+[m[32m    function toggleTheme() {[m
[32m+[m[32m      document.body.classList.toggle("dark-mode");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    document.getElementById("logForm").addEventListener("submit", async function (event) {[m
[32m+[m[32m      event.preventDefault();[m
[32m+[m
[32m+[m[32m      const form = event.target;[m
[32m+[m[32m      const spinner = document.getElementById("loadingSpinner");[m
[32m+[m[32m      const statusText = document.getElementById("statusText");[m
[32m+[m[32m      const submitBtn = form.querySelector("button[type='submit']");[m
[32m+[m
[32m+[m[32m      submitBtn.disabled = true;[m
[32m+[m[32m      spinner.style.display = "inline-block";[m
[32m+[m[32m      statusText.textContent = "Downloading logs... Please wait.";[m
[32m+[m
[32m+[m[32m      const formData = new FormData(form);[m
[32m+[m[32m      const query = new URLSearchParams(formData).toString();[m
[32m+[m
[32m+[m[32m      try {[m
[32m+[m[32m        const response = await fetch(`/download_cs?${query}`);[m
[32m+[m[32m        if (!response.ok) throw new Error("Download failed");[m
[32m+[m
[32m+[m[32m        const blob = await response.blob();[m
[32m+[m[32m        const contentDisposition = response.headers.get("Content-Disposition");[m
[32m+[m[32m        const filename = contentDisposition?.match(/filename="(.+)"/)?.[1] || "cs_logs.zip";[m
[32m+[m
[32m+[m[32m        const url = window.URL.createObjectURL(blob);[m
[32m+[m[32m        const a = document.createElement("a");[m
[32m+[m[32m        a.href = url;[m
[32m+[m[32m        a.download = filename;[m
[32m+[m[32m        document.body.appendChild(a);[m
[32m+[m[32m        a.click();[m
[32m+[m[32m        a.remove();[m
[32m+[m[32m        window.URL.revokeObjectURL(url);[m
[32m+[m
[32m+[m[32m        statusText.textContent = "✅ Download complete.";[m
[32m+[m[32m        new bootstrap.Toast(document.getElementById("successToast")).show();[m
[32m+[m[32m      } catch (err) {[m
[32m+[m[32m        console.error(err);[m
[32m+[m[32m        statusText.textContent = "❌ Download failed. Please try again.";[m
[32m+[m[32m      } finally {[m
[32m+[m[32m        spinner.style.display = "none";[m
[32m+[m[32m        submitBtn.disabled = false;[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    document.getElementById("otherForm").addEventListener("submit", async function (event) {[m
[32m+[m[32m      event.preventDefault();[m
[32m+[m
[32m+[m[32m      const form = event.target;[m
[32m+[m[32m      const spinner = document.getElementById("otherSpinner");[m
[32m+[m[32m      const statusText = document.getElementById("otherStatusText");[m
[32m+[m[32m      const submitBtn = form.querySelector("button[type='submit']");[m
[32m+[m
[32m+[m[32m      submitBtn.disabled = true;[m
[32m+[m[32m      spinner.style.display = "inline-block";[m
[32m+[m[32m      statusText.textContent = "Downloading logs... Please wait.";[m
[32m+[m
[32m+[m[32m      const formData = new FormData(form);[m
[32m+[m[32m      const queryParams = new URLSearchParams();  //[m[41m [m
[32m+[m[32m      queryParams.set("date", formData.get("date"));[m
[32m+[m[32m      queryParams.set("env", formData.get("env"));[m
[32m+[m[32m      queryParams.set("logs", formData.get("logs"));  //[m[41m [m
[32m+[m
[32m+[m[32m      //selectedLogs.forEach(log => queryParams.append("logs", log));[m
[32m+[m
[32m+[m[32m      try {[m
[32m+[m[32m        const response = await fetch(`/download_other?${queryParams.toString()}`);[m
[32m+[m[32m        if (!response.ok) throw new Error("Download failed");[m
[32m+[m
[32m+[m[32m        const blob = await response.blob();[m
[32m+[m[32m        const contentDisposition = response.headers.get("Content-Disposition");[m
[32m+[m[32m        const filename = contentDisposition?.match(/filename="(.+)"/)?.[1] || "other_logs.zip";[m
[32m+[m
[32m+[m[32m        const url = window.URL.createObjectURL(blob);[m
[32m+[m[32m        const a = document.createElement("a");[m
[32m+[m[32m        a.href = url;[m
[32m+[m[32m        a.download = filename;[m
[32m+[m[32m        document.body.appendChild(a);[m
[32m+[m[32m        a.click();[m
[32m+[m[32m        a.remove();[m
[32m+[m[32m        window.URL.revokeObjectURL(url);[m
[32m+[m
[32m+[m[32m        statusText.textContent = "✅ Download complete.";[m
[32m+[m[32m        new bootstrap.Toast(document.getElementById("successToast")).show();[m
[32m+[m[32m      } catch (err) {[m
[32m+[m[32m        console.error(err);[m
[32m+[m[32m        statusText.textContent = "❌ Download failed. Please try again.";[m
[32m+[m[32m      } finally {[m
[32m+[m[32m        spinner.style.display = "none";[m
[32m+[m[32m        submitBtn.disabled = false;[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
[32m+[m[32m  </script>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html> -->[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html lang="en">[m
[32m+[m[32m<head>[m
[32m+[m[32m  <meta charset="UTF-8" />[m
[32m+[m[32m  <title>Logs Downloader</title>[m
[32m+[m[32m  <meta name="viewport" content="width=device-width, initial-scale=1" />[m
[32m+[m[32m  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />[m
[32m+[m[32m  <style>[m
[32m+[m[32m    body {[m
[32m+[m[32m      background: linear-gradient(to right, #f4f6f9, #e9ecef);[m
[32m+[m[32m      font-family: 'Segoe UI', sans-serif;[m
[32m+[m[32m      color: #212529;[m
[32m+[m[32m      transition: background-color 0.3s ease, color 0.3s ease;[m
[32m+[m[32m    }[m
[32m+[m[32m    body.dark-mode {[m
[32m+[m[32m      background: #1f1f1f;[m
[32m+[m[32m      color: #e0e0e0;[m
[32m+[m[32m    }[m
[32m+[m[32m    .tab-container {[m
[32m+[m[32m      max-width: 900px;[m
[32m+[m[32m      margin: 50px auto;[m
[32m+[m[32m      background: #ffffff;[m
[32m+[m[32m      padding: 40px;[m
[32m+[m[32m      border-radius: 20px;[m
[32m+[m[32m      box-shadow: 0px 20px 40px rgba(0, 0, 0, 0.1);[m
[32m+[m[32m    }[m
[32m+[m[32m    h4 {[m
[32m+[m[32m      font-weight: 600;[m
[32m+[m[32m      margin-bottom: 15px;[m
[32m+[m[32m    }[m
[32m+[m[32m    label {[m
[32m+[m[32m      font-weight: 500;[m
[32m+[m[32m      margin-top: 10px;[m
[32m+[m[32m    }[m
[32m+[m[32m    select, input[type="text"], input[type="date"] {[m
[32m+[m[32m      border-radius: 10px;[m
[32m+[m[32m      padding: 12px;[m
[32m+[m[32m      font-size: 1rem;[m
[32m+[m[32m    }[m
[32m+[m[32m    .btn-lg {[m
[32m+[m[32m      padding: 12px 20px;[m
[32m+[m[32m      border-radius: 14px;[m
[32m+[m[32m      font-size: 1.05rem;[m
[32m+[m[32m      font-weight: 600;[m
[32m+[m[32m    }[m
[32m+[m[32m    .nav-tabs .nav-link {[m
[32m+[m[32m      font-size: 1.1rem;[m
[32m+[m[32m      font-weight: 600;[m
[32m+[m[32m    }[m
[32m+[m[32m    .spinner-border {[m
[32m+[m[32m      width: 2rem;[m
[32m+[m[32m      height: 2rem;[m
[32m+[m[32m    }[m
[32m+[m[32m    .progress {[m
[32m+[m[32m      height: 8px;[m
[32m+[m[32m      border-radius: 20px;[m
[32m+[m[32m      overflow: hidden;[m
[32m+[m[32m      background-color: #e9ecef;[m
[32m+[m[32m    }[m
[32m+[m[32m    .progress-bar {[m
[32m+[m[32m      background-color: #0d6efd;[m
[32m+[m[32m      transition: width 0.6s ease;[m
[32m+[m[32m    }[m
[32m+[m[32m    .toast-container {[m
[32m+[m[32m      position: fixed;[m
[32m+[m[32m      bottom: 20px;[m
[32m+[m[32m      right: 20px;[m
[32m+[m[32m      z-index: 1055;[m
[32m+[m[32m    }[m
[32m+[m[32m  </style>[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m[41m  [m
[32m+[m[32m <button class="btn btn-outline-secondary position-absolute top-0 end-0 m-4" onclick="toggleTheme()">🌙 / ☀️</button>[m
[32m+[m[32m  <div class="tab-container">[m
[32m+[m[32m    <ul class="nav nav-tabs">[m
[32m+[m[32m      <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#cs">🤖 CS Logs</a></li>[m
[32m+[m[32m      <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#other">📦 Other Logs</a></li>[m
[32m+[m[32m    </ul>[m
[32m+[m[32m    <div class="tab-content mt-4">[m
[32m+[m[32m      <div class="tab-pane fade show active" id="cs">[m
[32m+[m[32m        <form id="logForm">[m
[32m+[m[32m          <h4>📅 Select Date</h4>[m
[32m+[m[32m          <input type="date" class="form-control mb-3" name="date" required />[m
[32m+[m
[32m+[m[32m          <h4>🌍 Select Environment</h4>[m
[32m+[m[32m          <select name="env" class="form-select mb-3" required>[m
[32m+[m[32m            <option value="1">US-PROD</option>[m
[32m+[m[32m            <option value="2">DE-PROD</option>[m
[32m+[m[32m            <option value="3">AU-PROD</option>[m
[32m+[m[32m            <option value="4">EU-PROD</option>[m
[32m+[m[32m          </select>[m
[32m+[m
[32m+[m[32m          <h4>🆔 Bot ID + User ID</h4>[m
[32m+[m[32m          <input type="text" class="form-control mb-3" name="sidcid" placeholder="st-xxx+u-yyy" required />[m
[32m+[m
[32m+[m[32m          <h4>🌐 Select Language</h4>[m
[32m+[m[32m          <select name="lang" class="form-select mb-4" required>[m
[32m+[m[32m            <option value="1">English-LOGS</option>[m
[32m+[m[32m            <option value="2">English-Regression-LOGS</option>[m
[32m+[m[32m            <option value="3">USERS-English-Regression</option>[m
[32m+[m[32m            <option value="4">USERS-English</option>[m
[32m+[m[32m            <option value="5">USERS-french</option>[m
[32m+[m[32m            <option value="6">USERS-german</option>[m
[32m+[m[32m            <option value="7">USERS-multilang</option>[m
[32m+[m[32m            <option value="8">USERS-spanish</option>[m
[32m+[m[32m            <option value="9">french-LOGS</option>[m
[32m+[m[32m            <option value="10">german-LOGS</option>[m
[32m+[m[32m            <option value="11">multilang-LOGS</option>[m
[32m+[m[32m            <option value="12">spanish-LOGS</option>[m
[32m+[m[32m            <option value="13">All languages</option>[m
[32m+[m[32m          </select>[m
[32m+[m
[32m+[m[32m          <button type="submit" class="btn btn-primary btn-lg w-100">⬇️ Download CS Logs</button>[m
[32m+[m[32m          <div class="text-center mt-3">[m
[32m+[m[32m            <div id="loadingSpinner" class="spinner-border text-primary" style="display:none;"></div>[m
[32m+[m[32m            <div class="progress mt-2" style="display:none;" id="progressCS">[m
[32m+[m[32m              <div class="progress-bar" role="progressbar" style="width: 0%" id="progressBarCS"></div>[m
[32m+[m[32m            </div>[m
[32m+[m[32m            <p id="statusText" class="text-muted mt-2"></p>[m
[32m+[m[32m            <!-- <button id="cancelCS" class="btn btn-sm btn-danger mt-2" style="display:none;">⛔ Cancel</button> -->[m
[32m+[m[32m          </div>[m
[32m+[m[32m        </form>[m
[32m+[m[32m      </div>[m
[32m+[m
[32m+[m[32m      <div class="tab-pane fade" id="other">[m
[32m+[m[32m        <form id="otherForm">[m
[32m+[m[32m          <h4>📅 Select Date</h4>[m
[32m+[m[32m          <input type="date" class="form-control mb-3" name="date" required />[m
[32m+[m
[32m+[m[32m          <h4>🌍 Select Region</h4>[m
[32m+[m[32m          <select name="env" class="form-select mb-3" required>[m
[32m+[m[32m            <option value="1">US-PROD</option>[m
[32m+[m[32m            <option value="2">DE-PROD</option>[m
[32m+[m[32m            <option value="3">AU-PROD</option>[m
[32m+[m[32m            <option value="4">EU-PROD</option>[m
[32m+[m[41m      [m
[32m+[m[32m          </select>[m
[32m+[m
[32m+[m[32m          <h4>🗂️ Select Log Type</h4>[m
[32m+[m[32m          <select name="logs" class="form-select mb-4" required>[m
[32m+[m[32m            <option value="1">BotsServiceAdmin Logs</option>[m
[32m+[m[32m            <option value="2">BotsServiceRuntime Logs</option>[m
[32m+[m[32m            <option value="3">Koreapp Logs</option>[m
[32m+[m[32m            <!-- <option value="4">FAQ Logs</option>[m[41m [m
[32m+[m[32m            <option value="5">ML Logs</option>  -->[m
[32m+[m[32m            <option value="6">app-logs</option>[m
[32m+[m[32m            <option value="7">profile-logs</option>[m
[32m+[m[41m        [m
[32m+[m[41m        [m
[32m+[m[32m          </select>[m
[32m+[m
[32m+[m[32m          <button type="submit" class="btn btn-success btn-lg w-100">⬇️ Download Other Logs</button>[m
[32m+[m[32m          <div class="text-center mt-3">[m
[32m+[m[32m            <div id="otherSpinner" class="spinner-border text-success" style="display:none;"></div>[m
[32m+[m[32m            <div class="progress mt-2" style="display:none;" id="progressOther">[m
[32m+[m[32m              <div class="progress-bar bg-success" role="progressbar" style="width: 0%" id="progressBarOther"></div>[m
[32m+[m[32m            </div>[m
[32m+[m[32m            <p id="otherStatusText" class="text-muted mt-2"></p>[m
[32m+[m[32m            <!-- <button id="cancelOther" class="btn btn-sm btn-danger mt-2" style="display:none;">⛔ Cancel</button> -->[m
[32m+[m[32m          </div>[m
[32m+[m[32m        </form>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    </div>[m
[32m+[m[32m  </div>[m
[32m+[m
[32m+[m[32m  <div class="toast-container">[m
[32m+[m[32m    <div id="successToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">[m
[32m+[m[32m      <div class="d-flex">[m
[32m+[m[32m        <div class="toast-body">[m
[32m+[m[32m          ✅ Logs downloaded successfully.[m
[32m+[m[32m        </div>[m
[32m+[m[32m        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    </div>[m
[32m+[m[32m  </div>[m
[32m+[m[32m  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>[m
[32m+[m[32m   <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> -->[m
[32m+[m[32m  <script>[m
[32m+[m[32m    function toggleTheme() {[m
[32m+[m[32m      document.body.classList.toggle("dark-mode");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function updateProgress(barId, percent) {[m
[32m+[m[32m      const bar = document.getElementById(barId);[m
[32m+[m[32m      if (bar) bar.style.width = `${percent}%`;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function showToast() {[m
[32m+[m[32m      new bootstrap.Toast(document.getElementById("successToast")).show();[m
[32m+[m[32m    }[m
[32m+[m[32m  </script>[m
[32m+[m[32m  <script>[m
[32m+[m[32m    function handleFormSubmission(formId, endpoint, spinnerId, statusTextId, cancelBtnId) {[m
[32m+[m[32m      const form = document.getElementById(formId);[m
[32m+[m[32m      const spinner = document.getElementById(spinnerId);[m
[32m+[m[32m      const statusText = document.getElementById(statusTextId);[m
[32m+[m[32m      // const cancelBtn = document.getElementById(cancelBtnId);[m
[32m+[m
[32m+[m[32m      form.addEventListener("submit", async function (e) {[m
[32m+[m[32m        e.preventDefault();[m
[32m+[m[32m        spinner.style.display = "inline-block";[m
[32m+[m[32m        statusText.textContent = "🕒 Request sent. Preparing your logs...";[m
[32m+[m
[32m+[m[32m        const formData = new FormData(form);[m
[32m+[m[32m        const query = new URLSearchParams(formData).toString();[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m          const taskResp = await fetch(`${endpoint}?${query}`);[m
[32m+[m[32m          const task = await taskResp.json();[m
[32m+[m[32m          const task_id = task.task_id;[m
[32m+[m
[32m+[m[32m          // // cancelBtn.style.display = "inline-block";[m
[32m+[m[32m          // cancelBtn.onclick = async () => {[m
[32m+[m[32m          //   await fetch(`/cancel/${task_id}`, { method: "POST" });[m
[32m+[m[32m          //   statusText.textContent = "❌ Cancelled by user.";[m
[32m+[m[32m          //   spinner.style.display = "none";[m
[32m+[m[32m          //   cancelBtn.style.display = "none";[m
[32m+[m[32m          // };[m
[32m+[m
[32m+[m[32m          const poll = setInterval(async () => {[m
[32m+[m[32m            const res = await fetch(`/status/${task_id}`);[m
[32m+[m[32m            const data = await res.json();[m
[32m+[m
[32m+[m[32m            if (data.status === "completed") {[m
[32m+[m[32m              clearInterval(poll);[m
[32m+[m[32m            //  cancelBtn.style.display = "none";[m
[32m+[m[32m              const downloadRes = await fetch(`/download/${task_id}`);[m
[32m+[m[32m              const blob = await downloadRes.blob();[m
[32m+[m[32m              const contentDisposition = downloadRes.headers.get("Content-Disposition");[m
[32m+[m[32m              const filename = contentDisposition?.match(/filename="(.+)"/)?.[1] || "logs.zip";[m
[32m+[m
[32m+[m[32m              const url = window.URL.createObjectURL(blob);[m
[32m+[m[32m              const a = document.createElement("a");[m
[32m+[m[32m              a.href = url;[m
[32m+[m[32m              a.download = filename;[m
[32m+[m[32m              document.body.appendChild(a);[m
[32m+[m[32m              a.click();[m
[32m+[m[32m              a.remove();[m
[32m+[m[32m              window.URL.revokeObjectURL(url);[m
[32m+[m
[32m+[m[32m              statusText.textContent = "✅ Logs downloaded successfully.";[m
[32m+[m[32m              spinner.style.display = "none";[m
[32m+[m[32m            } else if (data.status === "failed" || data.status === "cancelled") {[m
[32m+[m[32m              clearInterval(poll);[m
[32m+[m[32m             // cancelBtn.style.display = "none";[m
[32m+[m[32m              statusText.textContent = `❌ ${data.status.toUpperCase()}: ${data.result || "Operation failed"}`;[m
[32m+[m[32m              spinner.style.display = "none";[m
[32m+[m[32m            } else {[m
[32m+[m[32m              statusText.textContent = `⌛ Status: ${data.status} (${data.elapsed_seconds}s)`;[m
[32m+[m[32m            }[m
[32m+[m[32m          }, 5000);[m
[32m+[m[32m        } catch (err) {[m
[32m+[m[32m          console.error(err);[m
[32m+[m[32m          statusText.textContent = "❌ Error: Something went wrong.";[m
[32m+[m[32m          spinner.style.display = "none";[m
[32m+[m[32m        }[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    handleFormSubmission("logForm", "/download_cs", "loadingSpinner", "statusText", "cancelCS");[m
[32m+[m[32m    handleFormSubmission("otherForm", "/download_other", "otherSpinner", "otherStatusText", "cancelOther");[m
[32m+[m[32m  </script>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
